@startuml
class kr.spring.challenge.vo.ChallengeReviewVO {
- long chal_rev_num
- long chal_num
- long mem_num
- String chal_rev_ip
- Date chal_rev_date
- Date chal_rev_mdate
- int chal_rev_grade
- String chal_rev_content
- String mem_nick
- String mem_photo
}

class kr.spring.challenge.vo.ChallengeVerifyVO {
- long chal_ver_num
- long chal_joi_num
- long mem_num
- String chal_content
- MultipartFile upload
- String chal_ver_photo
- int chal_ver_status
- int chal_ver_report
- Date chal_reg_date
- long chal_num
- int reported_num
}

interface kr.spring.challenge.service.ChallengeService {
+ void insertChallenge(ChallengeVO,ChallengeJoinVO,ChallengePaymentVO,ChallengeChatVO)
+ List<ChallengeVO> selectList(Map<String,Object>)
+ Integer selectRowCount(Map<String,Object>)
+ ChallengeVO selectChallenge(Long)
+ void updateChallenge(Long)
+ void cancelChallenge(Long)
+ void deleteChalPhoto(Long)
+ int countCurrentParticipants(long)
+ void insertChallengeJoin(ChallengeJoinVO,ChallengePaymentVO)
+ Integer selectChallengeJoinListRowCount(Map<String,Object>)
+ List<ChallengeJoinVO> selectChallengeJoinList(Map<String,Object>)
+ ChallengeJoinVO selectChallengeJoin(Long)
+ Integer selectJoinMemberRowCount(Map<String,Object>)
+ List<ChallengeJoinVO> selectJoinMemberList(Map<String,Object>)
+ void deleteChallengeJoinsByChallengeId(Long)
+ void cancelChallengeJoin(Long,Long)
+ boolean isChallengeLeader(Long,Long)
+ Long selectLeaderJoiNum(Long)
+ ChallengeReviewVO selectChallengeReviewByMemberAndChallenge(Map<String,Object>)
+ void insertChallengePayment(ChallengePaymentVO)
+ ChallengePaymentVO selectChallengePayment(Long)
+ List<ChallengePaymentVO> selectChallengePaymentList(Long)
+ void insertChallengeVerify(ChallengeVerifyVO)
+ Integer selectChallengeVerifyListRowCount(Map<String,Object>)
+ List<ChallengeVerifyVO> selectChallengeVerifyList(Map<String,Object>)
+ ChallengeVerifyVO selectChallengeVerify(Long)
+ void updateChallengeVerify(ChallengeVerifyVO)
+ void deleteChallengeVerify(Long)
+ int countWeeklyVerify(Long,LocalDate,int)
+ Integer countTodayVerify(Long)
+ void updateVerifyStatus(Map<String,Long>)
+ void insertVerifyReport(ChallengeVerifyRptVO)
+ void insertChallengeReview(ChallengeReviewVO)
+ List<ChallengeReviewVO> selectChallengeReviewList(Long)
+ ChallengeReviewVO selectChallengeReview(Long)
+ void updateChallengeReview(ChallengeReviewVO)
+ void deleteChallengeReview(Long)
+ void insertChallengeChat(ChallengeChatVO)
+ List<ChallengeChatVO> selectChallengeChat(Map<String,Object>)
+ void deleteChallengeChat(Long)
+ ChallengeFavVO selectFav(ChallengeFavVO)
+ Integer selectFavCount(Long)
+ void insertFav(ChallengeFavVO)
+ void deleteFav(ChallengeFavVO)
+ void processTodayExpiredChallenges()
+ void refundPointsToUsers(Long)
+ List<ChallengeVO> selectChallengeList(Map<String,Object>)
+ int selectChallengeCount(Map<String,Object>)
+ List<ChallengeVO> getPopularChallenges()
+ List<ChallengeVO> getExerciseChallenges()
}

interface kr.spring.challenge.dao.ChallengeMapper {
+ Long selectChal_num()
+ void insertChallenge(ChallengeVO)
+ List<ChallengeVO> selectList(Map<String,Object>)
+ Integer selectRowCount(Map<String,Object>)
+ ChallengeVO selectChallenge(Long)
+ void updateChallengeStatus(Long)
+ void deleteChalPhoto(Long)
+ int countCurrentParticipants(long)
+ Long selectChal_joi_num()
+ void insertChallengeJoin(ChallengeJoinVO)
+ Integer selectChallengeJoinListRowCount(Map<String,Object>)
+ List<ChallengeJoinVO> selectChallengeJoinList(Map<String,Object>)
+ ChallengeJoinVO selectChallengeJoin(Long)
+ Integer selectJoinMemberRowCount(Map<String,Object>)
+ List<ChallengeJoinVO> selectJoinMemberList(Map<String,Object>)
+ Long selectLeaderJoiNum(Long)
+ void deleteChallengeJoinsByChallengeId(Long)
+ ChallengeReviewVO selectChallengeReviewByMemberAndChallenge(Map<String,Object>)
+ void insertChallengePayment(ChallengePaymentVO)
+ ChallengePaymentVO selectChallengePayment(Long)
+ void updateChalPaymentStatus(Long)
+ void updateChallengeJoinStatus(Long)
+ void insertChallengeVerify(ChallengeVerifyVO)
+ Integer selectChallengeVerifyListRowCount(Map<String,Object>)
+ List<ChallengeVerifyVO> selectChallengeVerifyList(Map<String,Object>)
+ List<ChallengeVerifyVO> selectChallengeVerifyListPage(Map<String,Object>)
+ ChallengeVerifyVO selectChallengeVerify(Long)
+ void updateChallengeVerify(ChallengeVerifyVO)
+ void deleteChallengeVerify(Long)
+ int countWeeklyVerify(Map<String,Object>)
+ Integer countTodayVerify(Long)
+ void updateVerifyStatus(Map<String,Long>)
+ void insertVerifyReport(ChallengeVerifyRptVO)
+ void updateReportStatus(Long)
+ Integer selectReportedVerifyCount(Long)
+ Integer selectReportedMemberCount(Long)
+ Long selectChal_rev_num()
+ void insertChallengeReview(ChallengeReviewVO)
+ List<ChallengeReviewVO> selectChallengeReviewList(Long)
+ ChallengeReviewVO selectChallengeReview(Long)
+ void updateChallengeReview(ChallengeReviewVO)
+ void deleteChallengeReview(Long)
+ Long selectChat_id()
+ void insertChallengeChat(ChallengeChatVO)
+ void insertChatRead(Map<String,Object>)
+ List<ChallengeChatVO> selectChallengeChat(Map<String,Object>)
+ void deleteChatRead(Map<String,Object>)
+ void deleteChalChatRead(Long)
+ void deleteChallengeChat(Long)
+ ChallengeFavVO selectFav(ChallengeFavVO)
+ Integer selectFavCount(Long)
+ void insertFav(ChallengeFavVO)
+ void deleteFav(ChallengeFavVO)
+ List<ChallengeVO> getTodayExpiredChallenges(LocalDate)
+ void updateChallengeJoinStatusToCompleted(long)
+ void insertRefundPoints(Long,int,int)
+ List<ChallengeVO> selectChallengeList(Map<String,Object>)
+ int selectChallengeCount(Map<String,Object>)
+ List<ChallengeVO> getPopularChallenges()
+ List<ChallengeVO> getExerciseChallenges()
+ void deleteChalFavsByMember(long)
}

class kr.spring.challenge.vo.ChallengeJoinVO {
- long chal_joi_num
- long chal_num
- long mem_num
- Integer dcate_num
- Double chal_joi_rate
- Double chal_joi_total
- Integer chal_joi_success
- Double chal_joi_refund
- Integer chal_joi_status
- Date chal_joi_date
- String chal_joi_ip
- String chal_title
- String chal_sdate
- String chal_edate
- Long chal_fee
- String dcate_charity
- int chal_freq
- String mem_nick
- String mem_photo
- int reported_num
- boolean isHost
}

class kr.spring.challenge.vo.ChallengeVO {
- long chal_num
- long mem_num
- int chal_public
- int chal_type
- String chal_title
- String chal_content
- MultipartFile upload
- String chal_photo
- String chal_verify
- Integer chal_freq
- String chal_sdate
- Integer chal_period
- Integer chal_fee
- Integer chal_max
- Date chal_rdate
- String chal_ip
- Integer chal_status
- String chal_edate
- String mem_nick
- String mem_photo
- String categoryName
- Integer chal_phase
+ void calculateChalEdate()
}


class kr.spring.challenge.controller.ChallengeAjaxController {
- ChallengeService challengeService
- CategoryService categoryService
- MemberService memberService
- IamportClient impClient
- String apiKey
- String secretKey
+ Map<String,Object> getList(int,int,int,String,String,String,String,String,HttpSession)
+ Map<String,Object> joinMemberList(int,long,long,int)
+ Map<String,Object> verifyMemberList(int,long,long,int,HttpSession)
+ Map<String,Object> reportChallengeVerify(Map<String,Long>,HttpSession)
+ Map<String,Object> cancelChallengeVerify(Map<String,Long>,HttpSession)
+ Map<String,Object> recoverChallengeVerify(Map<String,Long>,HttpSession)
+ void initImp()
+ IamportResponse<Payment> validateIamportWrite(String,long,HttpSession)
+ Map<String,String> saveChallengeInfoWrite(Map<String,Object>,HttpSession,HttpServletRequest)
+ IamportResponse<Payment> validateIamport(String,HttpSession,HttpServletRequest)
+ Map<String,String> saveChallengeInfo(Map<String,Object>,HttpSession,HttpServletRequest)
+ void deleteImg(HttpSession,HttpServletRequest)
+ Map<String,Object> joinChallengeChat(Long,HttpSession)
+ Map<String,String> writeChallengeChat(long,String,MultipartFile,HttpSession,HttpServletRequest)
+ Map<String,Object> readChallengeChat(long,HttpSession)
+ Map<String,Object> getFav(ChallengeFavVO,HttpSession)
+ Map<String,Object> writeFav(ChallengeFavVO,HttpSession)
+ ResponseEntity<String> deleteChallengeJoin(Map<String,Object>,HttpSession)
}


class kr.spring.challenge.service.ChallengeServiceImpl {
~ ChallengeMapper challengeMapper
~ MemberMapper memberMapper
~ PointService pointService
~ MemberService memberService
~ NotifyService notifyService
- IamportClient impClient
- String apiKey
- String secretKey
+ void initImp()
+ void insertChallenge(ChallengeVO,ChallengeJoinVO,ChallengePaymentVO,ChallengeChatVO)
+ List<ChallengeVO> selectList(Map<String,Object>)
+ Integer selectRowCount(Map<String,Object>)
+ ChallengeVO selectChallenge(Long)
+ void updateChallenge(Long)
+ void deleteChalPhoto(Long)
+ int countCurrentParticipants(long)
+ void insertChallengeJoin(ChallengeJoinVO,ChallengePaymentVO)
+ List<ChallengeJoinVO> selectChallengeJoinList(Map<String,Object>)
+ ChallengeJoinVO selectChallengeJoin(Long)
+ void deleteChallengeJoinsByChallengeId(Long)
+ boolean isChallengeLeader(Long,Long)
+ Long selectLeaderJoiNum(Long)
+ ChallengeReviewVO selectChallengeReviewByMemberAndChallenge(Map<String,Object>)
+ void insertChallengePayment(ChallengePaymentVO)
+ List<ChallengePaymentVO> selectChallengePaymentList(Long)
+ void insertChallengeVerify(ChallengeVerifyVO)
+ Integer selectChallengeVerifyListRowCount(Map<String,Object>)
+ List<ChallengeVerifyVO> selectChallengeVerifyList(Map<String,Object>)
+ ChallengeVerifyVO selectChallengeVerify(Long)
+ void updateChallengeVerify(ChallengeVerifyVO)
+ void deleteChallengeVerify(Long)
+ int countWeeklyVerify(Long,LocalDate,int)
+ Integer countTodayVerify(Long)
+ List<ChallengeJoinVO> selectJoinMemberList(Map<String,Object>)
+ Integer selectJoinMemberRowCount(Map<String,Object>)
+ void insertChallengeReview(ChallengeReviewVO)
+ List<ChallengeReviewVO> selectChallengeReviewList(Long)
+ ChallengeReviewVO selectChallengeReview(Long)
+ void updateChallengeReview(ChallengeReviewVO)
+ void deleteChallengeReview(Long)
+ Integer selectChallengeJoinListRowCount(Map<String,Object>)
+ void cancelChallengeJoin(Long,Long)
+ void cancelChallenge(Long)
+ void givePointsForReview(ChallengeReviewVO)
+ void insertChallengeChat(ChallengeChatVO)
+ List<ChallengeChatVO> selectChallengeChat(Map<String,Object>)
+ void deleteChallengeChat(Long)
+ ChallengeFavVO selectFav(ChallengeFavVO)
+ Integer selectFavCount(Long)
+ void insertFav(ChallengeFavVO)
+ void deleteFav(ChallengeFavVO)
+ void updateVerifyStatus(Map<String,Long>)
+ void insertVerifyReport(ChallengeVerifyRptVO)
+ void processTodayExpiredChallenges()
- void processChallenge(ChallengeVO)
+ void refundPointsToUsers(Long)
- int calculateReturnPoint(ChallengeJoinVO)
- int calculateAchieveRate(ChallengeJoinVO)
+ List<ChallengeVO> selectChallengeList(Map<String,Object>)
+ int selectChallengeCount(Map<String,Object>)
+ ChallengePaymentVO selectChallengePayment(Long)
+ List<ChallengeVO> getPopularChallenges()
+ List<ChallengeVO> getExerciseChallenges()
}


class kr.spring.challenge.vo.ChallengeVerifyRptVO {
- long report_mem_num
- long chal_ver_num
- long reported_joi_num
}

class kr.spring.challenge.scheduler.ChallengeScheduler {
- {static} Logger logger
- ChallengeService challengeService
+ void processTodayExpiredChallenges()
}


class kr.spring.challenge.vo.ChallengePaymentVO {
- long chal_pay_num
- long chal_joi_num
- long mem_num
- String od_imp_uid
- int chal_pay_price
- int chal_point
- Date chal_pay_date
- int chal_pay_status
- long chal_num
}

class kr.spring.challenge.vo.ChallengeFavVO {
- long chal_num
- long mem_num
}

class kr.spring.challenge.vo.ChallengeChatVO {
- long chat_id
- long chal_num
- long mem_num
- String chat_content
- MultipartFile upload
- String chat_filename
- String chat_date
- String mem_nick
- String mem_photo
- int chat_readCount
}

class kr.spring.challenge.controller.ChallengeController {
- ChallengeService challengeService
- CategoryService categoryService
+ ChallengeVO initChallengeVO()
+ ChallengeJoinVO initChallengeJoinVO()
+ ChallengeReviewVO initChallengeReviewVO()
+ void initBinder(WebDataBinder)
+ String form()
+ String checkValidation(ChallengeVO,BindingResult,HttpServletRequest,HttpSession,Model)
+ String list(Model)
+ String pastList(Model)
+ ModelAndView chalDetail(long,HttpSession)
+ String joinForm(long,HttpSession,Model)
+ String joinForm(Model,HttpSession)
+ String list(String,String,Model,HttpSession,int)
+ String joinChallengeChatRedirect(HttpSession,Model)
+ String verifyForm(long,Model)
+ String submitVerify(ChallengeVerifyVO,long,BindingResult,HttpServletRequest,HttpSession,Model)
+ ModelAndView verifyList(long,long,String,int)
+ ResponseEntity<String> updateVerify(long,String)
+ ResponseEntity<String> deleteVerify(long)
+ String reviewForm(long,Model)
+ String writeReview(ChallengeReviewVO,BindingResult,HttpServletRequest,HttpSession,Model)
+ String reviewList(long,String,Model)
+ ResponseEntity<String> refundPointsToUsers(Long)
+ String adminChallengeList(int,int,String,String,Model)
+ ModelAndView adminChallengeDetail(long,HttpSession)
}




kr.spring.challenge.service.ChallengeService <|.. kr.spring.challenge.service.ChallengeServiceImpl
@enduml