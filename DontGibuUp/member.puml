@startuml
class kr.spring.member.controller.MemberAjaxController {
- MemberService memberService
- PointService pointService
- NotifyService notifyService
+ Map<String,String> checkEmail(MemberVO)
+ Map<String,String> checkNick(MemberVO,HttpSession)
+ Map<String,Object> verifyVCode(String,HttpSession)
+ Map<String,Object> getUnreadCount(HttpSession,Model)
+ Map<String,Object> getNotification(HttpSession)
+ Map<String,Object> readNotification(long,HttpSession)
+ Map<String,Object> suspendMemberAjax(long,HttpSession)
+ Map<String,Object> activateMemberAjax(long,HttpSession)
+ Map<String,Object> updatePointAjax(long,int,HttpSession)
}


class kr.spring.member.service.MemberOAuthServiceImpl {
- String k_client_id
- String k_redirect_uri
- String k_client_secret
- String n_client_id
- String n_redirect_uri
- String n_client_secret
+ String getKakaoAccessToken(String)
+ UserInfo getKakaoInfo(String)
+ void kakaoDisconnect(String)
+ String getNaverAccessToken(String,String)
+ UserInfo getNaverInfo(String)
}


class kr.spring.member.service.EmailService {
- JavaMailSender javaMailSender
+ void sendMail(EmailMessageVO,String)
}


interface kr.spring.member.service.MemberDeleteService {
+ void deleteAccount(long)
}

interface kr.spring.member.service.MemberOAuthService {
+ String getKakaoAccessToken(String)
+ UserInfo getKakaoInfo(String)
+ void kakaoDisconnect(String)
+ String getNaverAccessToken(String,String)
+ UserInfo getNaverInfo(String)
}

interface kr.spring.member.service.MemberService {
+ void insertMember(MemberVO)
+ boolean isCheckedPassword(MemberVO,String)
+ MemberVO selectMember(Long)
+ MemberVO selectMemberDetail(Long)
+ MemberVO selectMemberByEmail(String)
+ MemberVO selectMemberByNick(String)
+ String generateUniqueRCode()
+ boolean checkIfRCodeIsUnique(String)
+ Long selectMemNumByRCode(String)
+ MemberTotalVO selectMemberTotal(long)
+ int selectMemberPaymentCount(Map<String,Object>)
+ List<PaymentVO> selectMemberPayment(Map<String,Object>)
+ void updateMemPhoto(MemberVO)
+ void updateMember(MemberVO)
+ void updatePassword(MemberVO)
+ String getPasswordVerificationCode()
+ void updateMemPoint(PointVO)
+ List<MemberVO> selectMemberList(Map<String,Object>)
+ int selectMemberCount(Map<String,Object>)
+ void updateMemStatus(MemberVO)
+ void updateMemAuth(long,int)
}

class kr.spring.member.vo.MemberTotalVO {
~ long mem_num
~ int mem_point
~ int total_count
~ long total_amount
}

class kr.spring.member.service.MemberDeleteServiceImpl {
~ MemberMapper memberMapper
~ PointService pointService
~ NotifyService notifyService
~ PasswordEncoder pwEncoder
~ CartMapper cartMapper
~ ChallengeMapper challengeMapper
~ DeleteMapper deleteMapper
~ MemberService memberService
- IamportClient impClient
- String apiKey
- String secretKey
+ void initImp()
+ void deleteAccount(long)
}


class kr.spring.member.vo.PaymentVO {
- int type
- String payment_id
- String id
- String mem_num
- String price
- String donation
- String point
- String status
- String pay_date
- String ref
}

interface kr.spring.member.dao.MemberMapper {
+ long selectMemNum()
+ void insertMember(MemberVO)
+ void insertMemberDetail(MemberVO)
+ MemberVO selectMember(Long)
+ MemberVO selectMemberDetail(Long)
+ MemberVO selectMemberByEmail(String)
+ Long selectMemNumByRCode(String)
+ void updateMemPoint(PointVO)
+ void updateMemPointByAdmin(PointVO)
+ int checkRCodeExists(String)
+ MemberVO selectMemberByNick(String)
+ MemberTotalVO selectMemberTotal(long)
+ void updateMemPhoto(MemberVO)
+ void updateMember(MemberVO)
+ void updateMemberDetail(MemberVO)
+ void updatePassword(MemberVO)
+ int selectMemberPaymentCount(Map<String,Object>)
+ List<PaymentVO> selectMemberPayment(Map<String,Object>)
+ void deleteMember(long)
+ List<MemberVO> selectMemberList(Map<String,Object>)
+ int selectMemberCount(Map<String,Object>)
+ void updateMemStatus(MemberVO)
+ void deleteMemberDetail(long)
+ void updateMemAuth(long,int)
}

class kr.spring.member.controller.MyPageAjaxController {
- MemberService memberService
+ Map<String,String> processMemPhoto(MemberVO,HttpSession,HttpServletRequest)
+ Map<String,String> deleteMemPhoto(HttpSession,HttpServletRequest)
+ Map<String,String> checkPassword(HttpSession,HttpServletRequest)
}


class kr.spring.member.controller.MyPageController {
~ MemberService memberService
~ PointService pointService
~ CSService csService
~ DboxService dboxService
~ MemberDeleteService memberDeleteService
+ MemberVO initCommandMember()
+ InquiryVO initCommandInquiry()
+ String myPage()
+ String memberInfo(HttpSession,Model)
+ String updateMemberInfo(MemberVO,BindingResult,HttpSession,Model)
+ String changePasswordForm(Model,HttpSession)
+ String changePassword(MemberVO,BindingResult,Model,HttpServletRequest,HttpSession)
+ String deleteAccountForm(Model,HttpSession)
+ String deleteAccount(MemberVO,BindingResult,Model,HttpServletRequest,HttpSession)
+ String inviteFriendEvent(HttpSession,Model)
+ String memberPoint(int,HttpSession,Model)
+ String memberPayment(int,HttpSession,Model)
+ String memberInquiry(Model,HttpSession)
+ String memberInquiryDetail(long,Model)
+ String download(long,HttpServletRequest,Model)
+ String modifyForm(long,Model)
+ String modify(InquiryVO,BindingResult,HttpServletRequest,HttpSession,Model)
+ String deleteInquiry(long)
+ String memberReport(Model,HttpSession)
+ String memberReportDetail(long,Model)
+ String downloadReport(long,HttpServletRequest,Model)
+ String deleteReport(long)
+ String dboxMyPropose(int,HttpSession,Model)
+ String dboxMyDonation()
}


class kr.spring.member.controller.MemberController {
- MemberService memberService
- MemberOAuthService memberOAuthService
- RestTemplate restTemplate
- EmailService emailService
- ServletContext servletContext
- NotifyService notifyService
- String k_client_id
- String k_redirect_uri
- String k_client_secret
- String n_client_id
- String n_redirect_uri
- String n_client_secret
+ MemberVO initCommand()
+ String signupForm(String,HttpSession)
+ String signup(MemberVO,BindingResult,RedirectAttributes,HttpServletRequest,HttpSession)
+ String signupResult(Model,HttpSession)
+ String getKakaoLogin()
+ ResponseEntity<?> kakaoCallback(String,RedirectAttributes,HttpSession)
+ String signupFormKakao(HttpSession,Model)
+ String signupKakao(MemberVO,BindingResult,Model,HttpServletRequest,HttpSession)
+ String getNaverLogin()
~ ResponseEntity<?> naverCallback(String,String,RedirectAttributes,HttpSession)
+ String loginForm(HttpSession,Model)
+ String login(MemberVO,BindingResult,HttpSession)
+ String logout(HttpSession)
+ String logoutNaver(HttpSession)
+ String findPasswordForm()
+ String findPassword(String,HttpSession,Model,HttpServletRequest)
+ String changePasswordForm()
+ String changePassword(MemberVO,BindingResult,Model,HttpServletRequest,HttpSession)
+ String changePasswordResult(Model,HttpSession)
- String loadHtmlTemplate(String,String)
- String adminMemberList(int,int,String,String,Model)
- String adminMemberPoint(int,int,String,String,Model)
+ String statusAdmin(long,Model)
+ String authChange(long,int)
}


class kr.spring.member.vo.MemberVO {
- Long mem_num
- Integer auth_num
- String mem_social_id
- String mem_email
- String mem_nick
- Integer mem_status
- Integer mem_reg_type
- String mem_pw
- Integer pref_num
- String mem_photo
- String mem_name
- String mem_phone
- String mem_birth
- Date mem_date
- Date mem_mdate
- String mem_rcode
- String friend_rcode
- Integer recommend_status
- int mem_point
- MultipartFile upload
+ boolean isCheckedPassword(String)
}


class kr.spring.member.vo.EmailMessageVO {
- String to
- String subject
- String message
}

class kr.spring.member.service.MemberServiceImpl {
~ MemberMapper memberMapper
~ PointService pointService
~ NotifyService notifyService
~ PasswordEncoder pwEncoder
~ CartMapper cartMapper
~ ChallengeMapper challengeMapper
~ DeleteMapper deleteMapper
+ void insertMember(MemberVO)
+ boolean isCheckedPassword(MemberVO,String)
+ MemberVO selectMember(Long)
+ MemberVO selectMemberDetail(Long)
+ MemberVO selectMemberByEmail(String)
+ MemberVO selectMemberByNick(String)
+ String generateUniqueRCode()
+ boolean checkIfRCodeIsUnique(String)
+ Long selectMemNumByRCode(String)
+ void updateMemPhoto(MemberVO)
+ void updateMember(MemberVO)
+ void updateMemPoint(PointVO)
+ MemberTotalVO selectMemberTotal(long)
+ int selectMemberPaymentCount(Map<String,Object>)
+ List<PaymentVO> selectMemberPayment(Map<String,Object>)
+ void updatePassword(MemberVO)
+ String getPasswordVerificationCode()
- String createCode()
+ List<MemberVO> selectMemberList(Map<String,Object>)
+ int selectMemberCount(Map<String,Object>)
+ void updateMemStatus(MemberVO)
+ void updateMemAuth(long,int)
}


class kr.spring.member.vo.UserInfo {
- String id
- String email
+ <<Create>> UserInfo(String,String)
}




kr.spring.member.service.MemberOAuthService <|.. kr.spring.member.service.MemberOAuthServiceImpl
kr.spring.member.service.MemberDeleteService <|.. kr.spring.member.service.MemberDeleteServiceImpl
kr.spring.member.service.MemberService <|.. kr.spring.member.service.MemberServiceImpl
@enduml