@startuml
interface kr.spring.subscription.service.SubscriptionService {
+ long getSub_num()
+ void insertSubscription(SubscriptionVO)
+ void endSubscription(long)
+ SubscriptionVO getSubscriptionBySub_num(long)
+ void deleteSubscription(long)
+ int getTodayDate()
+ String getImpKeys(int)
+ String getImpSecret(int)
+ String getToken(int)
+ List<SubscriptionVO> getSubscriptionByDay(int)
+ void updateSub_status(long)
+ List<SubscriptionVO> getSubscriptionByMem_numWithCategories(long)
+ int getSubscriptionCountbyMem_num(long)
+ void modifyPayMethod(SubscriptionVO)
+ List<SubscriptionVO> getSubscriptionByD1(int)
+ int getSubscriptionCount(Map<String,Object>)
+ List<SubscriptionVO> getSubscription(Map<String,Object>)
+ long getPurchase_num(String)
+ long getDboxDoNum(String)
}

class kr.spring.point.service.PointServiceImpl {
~ PointMapper pointMapper
~ MemberMapper memberMapper
+ void insertPointLog(PointVO)
+ List<PointVO> getMemberPointList(Map<String,Object>)
+ Integer getMPointRowCount(Map<String,Object>)
+ void updateMemPointByAdmin(PointVO)
}


class kr.spring.config.SecurityConfig {
+ PasswordEncoder getPasswordEncoder()
+ SecurityFilterChain filterChain(HttpSecurity)
}

interface kr.spring.dbox.service.DboxService {
+ Long insertDbox(DboxVO)
+ void updateDboxStatus(long,int)
+ void updateDboxAcomment(long,String)
+ Integer selectListCount(Map<String,Object>)
+ List<DboxVO> selectList(Map<String,Object>)
+ Integer selectAdminListCount(Map<String,Object>)
+ List<DboxVO> selectAdminList(Map<String,Object>)
+ List<DboxVO> selectStatusUpdateList(int)
+ DboxVO selectDbox(long)
+ List<DboxVO> mainDboxList()
+ List<DboxBudgetVO> selectDboxBudgets(long)
+ void insertDboxDonation(DboxDonationVO)
+ List<DboxDonationVO> selectDboxDonations(long)
+ Integer selectDboxDonationsCount(long)
+ Long selecDoantionTotal(long)
+ DboxResultVO selectDboxResult(long)
+ void updatePayStatus(long,long)
+ int getDboxCountbyMem_num(Map<String,Object>)
+ List<DboxVO> getDboxByMem_num(Map<String,Object>)
+ List<DboxDonationVO> getDboxDonationVODboxNum(long)
+ void refund(RefundVO,DboxDonationVO)
}

class kr.spring.challenge.vo.ChallengeJoinVO {
- long chal_joi_num
- long chal_num
- long mem_num
- Integer dcate_num
- Double chal_joi_rate
- Double chal_joi_total
- Integer chal_joi_success
- Double chal_joi_refund
- Integer chal_joi_status
- Date chal_joi_date
- String chal_joi_ip
- String chal_title
- String chal_sdate
- String chal_edate
- Long chal_fee
- String dcate_charity
- int chal_freq
- String mem_nick
- String mem_photo
- int reported_num
- boolean isHost
}

interface kr.spring.config.validation.ValidationSequence {
}
interface kr.spring.goods.service.PurchaseService {
~ void insertPurchase(PurchaseVO)
~ List<CartVO> getPurchaseItems(long)
~ List<PurchaseVO> getPurchaseListByMember(long)
~ List<PurchaseVO> getAllPurchases()
~ void updateDeliveryStatus(int,String)
~ void updateRefundStatus(String,int)
~ void insertPurchaseWithCartItems(PurchaseVO)
~ void insertPurchaseItems(CartVO)
~ Long getSeq()
~ void updateDeliveryStatusByImpUid(String,String)
~ void updateStock(Map<String,Object>)
~ void updateStock(Long,Long,Integer)
~ Long getLastInsertedPurchaseNum()
~ PurchaseVO getPurchaseByImpUid(String)
}

interface kr.spring.cart.service.CartService {
+ void insertOrUpdateCart(CartVO)
+ List<CartVO> cartList(Map<String,Object>)
+ Integer cartRowCount(Map<String,Object>)
+ void deleteCart(int)
+ void updateCartQuantity(int,int)
}

class kr.spring.challenge.scheduler.ChallengeScheduler {
- {static} Logger logger
- ChallengeService challengeService
+ void processTodayExpiredChallenges()
}


interface kr.spring.payuid.service.PayuidService {
+ void registerPayUId(PayuidVO)
+ void deletePayuid(String)
+ List<PayuidVO> getPayUId(long)
+ PayuidVO getPayuidByMethod(PayuidVO)
+ PayuidVO getPayuidVOByPayuid(String)
+ String generateUUIDFromMem_num(long)
}

class kr.spring.member.controller.MemberController {
- MemberService memberService
- MemberOAuthService memberOAuthService
- RestTemplate restTemplate
- EmailService emailService
- ServletContext servletContext
- NotifyService notifyService
- String k_client_id
- String k_redirect_uri
- String k_client_secret
- String n_client_id
- String n_redirect_uri
- String n_client_secret
+ MemberVO initCommand()
+ String signupForm(String,HttpSession)
+ String signup(MemberVO,BindingResult,RedirectAttributes,HttpServletRequest,HttpSession)
+ String signupResult(Model,HttpSession)
+ String getKakaoLogin()
+ ResponseEntity<?> kakaoCallback(String,RedirectAttributes,HttpSession)
+ String signupFormKakao(HttpSession,Model)
+ String signupKakao(MemberVO,BindingResult,Model,HttpServletRequest,HttpSession)
+ String getNaverLogin()
~ ResponseEntity<?> naverCallback(String,String,RedirectAttributes,HttpSession)
+ String loginForm(HttpSession,Model)
+ String login(MemberVO,BindingResult,HttpSession)
+ String logout(HttpSession)
+ String logoutNaver(HttpSession)
+ String findPasswordForm()
+ String findPassword(String,HttpSession,Model,HttpServletRequest)
+ String changePasswordForm()
+ String changePassword(MemberVO,BindingResult,Model,HttpServletRequest,HttpSession)
+ String changePasswordResult(Model,HttpSession)
- String loadHtmlTemplate(String,String)
- String adminMemberList(int,int,String,String,Model)
- String adminMemberPoint(int,int,String,String,Model)
+ String statusAdmin(long,Model)
+ String authChange(long,int)
}


class kr.spring.category.vo.DonationCategoryVO {
- long dcate_num
- String dcate_name
- String dcate_charity
- String dcate_icon
- String dcate_content
- String dcate_banner
- MultipartFile iconUpload
- MultipartFile bannerUpload
}

interface kr.spring.refund.service.RefundService {
+ void insertRefund(RefundVO)
+ int getRefundCount(Map<String,Object>)
+ List<RefundVO> getRefundList(Map<String,Object>)
+ List<RefundVO> getRefundListByMemnum(Map<String,Object>)
+ RefundVO getRefundVOByReNum(long)
+ void deleteRefund(long)
+ void updateRefundStatus(long,int)
}

interface kr.spring.data.dao.DataMapper {
+ TotalVO selectTotalMain()
}

class kr.spring.challenge.vo.ChallengeFavVO {
- long chal_num
- long mem_num
}

class kr.spring.member.service.MemberServiceImpl {
~ MemberMapper memberMapper
~ PointService pointService
~ NotifyService notifyService
~ PasswordEncoder pwEncoder
~ CartMapper cartMapper
~ ChallengeMapper challengeMapper
~ DeleteMapper deleteMapper
+ void insertMember(MemberVO)
+ boolean isCheckedPassword(MemberVO,String)
+ MemberVO selectMember(Long)
+ MemberVO selectMemberDetail(Long)
+ MemberVO selectMemberByEmail(String)
+ MemberVO selectMemberByNick(String)
+ String generateUniqueRCode()
+ boolean checkIfRCodeIsUnique(String)
+ Long selectMemNumByRCode(String)
+ void updateMemPhoto(MemberVO)
+ void updateMember(MemberVO)
+ void updateMemPoint(PointVO)
+ MemberTotalVO selectMemberTotal(long)
+ int selectMemberPaymentCount(Map<String,Object>)
+ List<PaymentVO> selectMemberPayment(Map<String,Object>)
+ void updatePassword(MemberVO)
+ String getPasswordVerificationCode()
- String createCode()
+ List<MemberVO> selectMemberList(Map<String,Object>)
+ int selectMemberCount(Map<String,Object>)
+ void updateMemStatus(MemberVO)
+ void updateMemAuth(long,int)
}


class kr.spring.ServletInitializer {
# SpringApplicationBuilder configure(SpringApplicationBuilder)
}

class kr.spring.challenge.vo.ChallengeVerifyVO {
- long chal_ver_num
- long chal_joi_num
- long mem_num
- String chal_content
- MultipartFile upload
- String chal_ver_photo
- int chal_ver_status
- int chal_ver_report
- Date chal_reg_date
- long chal_num
- int reported_num
}

class kr.spring.util.DurationFromNow {
+ {static} String getTimeDiffLabel(String)
+ {static} String getTimeDiffLabel(Date)
+ {static} String getTimeDiffLabel(String,String)
+ {static} String getTimeDiffLabel(Date,Date)
}

interface kr.spring.subscription.dao.SubscriptionMapper {
+ long getSub_num()
+ void insertSubscription(SubscriptionVO)
+ SubscriptionVO getSubscriptionBySub_num(long)
+ void endSubscription(long)
+ void modifyPayMethod(SubscriptionVO)
+ void updateSub_status(long)
+ int getSubscriptionCountbyMem_num(long)
+ List<SubscriptionVO> getSubscriptionByMem_num(long)
+ int getSubscriptionCount(Map<String,Object>)
+ List<SubscriptionVO> getSubscription(Map<String,Object>)
+ void deleteSubscription(long)
+ String getImpKeys(int)
+ String getImpSecret(int)
+ List<SubscriptionVO> getSubscriptionByDay(int)
+ List<SubscriptionVO> getSubscriptionByD1(int)
+ long getPurchase_num(String)
+ long getDboxDoNum(String)
}

interface kr.spring.cs.service.CSService {
+ void insertInquiry(InquiryVO)
+ InquiryVO selectInquiryDetail(long)
+ List<InquiryVO> selectInquiryList(Map<String,Object>)
+ int selectInquiryListCount(Map<String,Object>)
+ List<InquiryVO> selectInquiryListByMemNum(long)
+ void updateInquiry(InquiryVO)
+ void deleteInquiry(long)
+ void replyInquiry(InquiryVO)
+ List<FaqVO> selectFaqList(Map<String,Object>)
+ long insertFaq(FaqVO)
+ void updateFaq(FaqVO)
+ void deleteFaq(long)
+ void insertReport(ReportVO)
+ int selectReportListCount(Map<String,Object>)
+ List<ReportVO> selectReportList(Map<String,Object>)
+ ReportVO selectReportDetail(long)
+ void replyReport(ReportVO)
+ void deleteReport(long)
+ List<ReportVO> selectReportListByMemNum(long)
}

class kr.spring.goods.service.GoodsServiceImpl {
~ GoodsMapper goodsMapper
+ void insertGoods(GoodsVO)
+ List<GoodsVO> selectList(Map<String,Object>,Integer)
+ Integer selectRowCount(Map<String,Object>)
+ void updateGoods(GoodsVO)
+ GoodsVO detailGoods(long)
+ void deleteGoods(long)
+ List<Map<String,Object>> getCategories()
+ void updatePayStatus(long,long)
+ GoodsVO todayGoods()
}


interface kr.spring.member.service.MemberDeleteService {
+ void deleteAccount(long)
}

class kr.spring.subscription.service.SubscriptionServiceImpl {
- SubscriptionMapper subscriptionMapper
- CategoryMapper categoryMapper
+ String getToken(int)
+ String getImpKeys(int)
+ String getImpSecret(int)
+ long getSub_num()
+ void insertSubscription(SubscriptionVO)
+ void endSubscription(long)
+ SubscriptionVO getSubscriptionBySub_num(long)
+ void deleteSubscription(long)
+ int getTodayDate()
+ List<SubscriptionVO> getSubscriptionByDay(int)
+ void updateSub_status(long)
+ List<SubscriptionVO> getSubscriptionByMem_numWithCategories(long)
+ int getSubscriptionCountbyMem_num(long)
+ void modifyPayMethod(SubscriptionVO)
+ List<SubscriptionVO> getSubscriptionByD1(int)
+ int getSubscriptionCount(Map<String,Object>)
+ List<SubscriptionVO> getSubscription(Map<String,Object>)
+ long getPurchase_num(String)
+ long getDboxDoNum(String)
}


class kr.spring.point.vo.PointVO {
+ long point_num
+ long mem_num
+ int pevent_type
+ int point_amount
+ String pevent_detail
+ Date point_date
+ <<Create>> PointVO(int,int)
+ <<Create>> PointVO(int,int,long)
}


class kr.spring.goods.controller.GoodsController {
- GoodsService goodsService
- CategoryService categoryService
+ GoodsVO initCommand()
+ String getlist(int,int,int,String,String,Model,HttpSession)
+ ModelAndView process(long)
+ String form()
+ String submit(GoodsVO,BindingResult,HttpServletRequest,HttpSession,Model)
+ String updateForm(long,HttpSession,Model)
+ String updateSubmit(GoodsVO,BindingResult,HttpSession,Model)
+ String deleteSubmit1(long,HttpSession,Model)
+ String deleteSubmit(long,HttpSession,Model)
}


class kr.spring.dbox.vo.DboxResultVO {
- long dbox_num
- long dbox_res_total
- int dbox_res_count
- String dbox_res_report
}

class kr.spring.challenge.controller.ChallengeAjaxController {
- ChallengeService challengeService
- CategoryService categoryService
- MemberService memberService
- IamportClient impClient
- String apiKey
- String secretKey
+ Map<String,Object> getList(int,int,int,String,String,String,String,String,HttpSession)
+ Map<String,Object> joinMemberList(int,long,long,int)
+ Map<String,Object> verifyMemberList(int,long,long,int,HttpSession)
+ Map<String,Object> reportChallengeVerify(Map<String,Long>,HttpSession)
+ Map<String,Object> cancelChallengeVerify(Map<String,Long>,HttpSession)
+ Map<String,Object> recoverChallengeVerify(Map<String,Long>,HttpSession)
+ void initImp()
+ IamportResponse<Payment> validateIamportWrite(String,long,HttpSession)
+ Map<String,String> saveChallengeInfoWrite(Map<String,Object>,HttpSession,HttpServletRequest)
+ IamportResponse<Payment> validateIamport(String,HttpSession,HttpServletRequest)
+ Map<String,String> saveChallengeInfo(Map<String,Object>,HttpSession,HttpServletRequest)
+ void deleteImg(HttpSession,HttpServletRequest)
+ Map<String,Object> joinChallengeChat(Long,HttpSession)
+ Map<String,String> writeChallengeChat(long,String,MultipartFile,HttpSession,HttpServletRequest)
+ Map<String,Object> readChallengeChat(long,HttpSession)
+ Map<String,Object> getFav(ChallengeFavVO,HttpSession)
+ Map<String,Object> writeFav(ChallengeFavVO,HttpSession)
+ ResponseEntity<String> deleteChallengeJoin(Map<String,Object>,HttpSession)
}


class kr.spring.challenge.service.ChallengeServiceImpl {
~ ChallengeMapper challengeMapper
~ MemberMapper memberMapper
~ PointService pointService
~ MemberService memberService
~ NotifyService notifyService
- IamportClient impClient
- String apiKey
- String secretKey
+ void initImp()
+ void insertChallenge(ChallengeVO,ChallengeJoinVO,ChallengePaymentVO,ChallengeChatVO)
+ List<ChallengeVO> selectList(Map<String,Object>)
+ Integer selectRowCount(Map<String,Object>)
+ ChallengeVO selectChallenge(Long)
+ void updateChallenge(Long)
+ void deleteChalPhoto(Long)
+ int countCurrentParticipants(long)
+ void insertChallengeJoin(ChallengeJoinVO,ChallengePaymentVO)
+ List<ChallengeJoinVO> selectChallengeJoinList(Map<String,Object>)
+ ChallengeJoinVO selectChallengeJoin(Long)
+ void deleteChallengeJoinsByChallengeId(Long)
+ boolean isChallengeLeader(Long,Long)
+ Long selectLeaderJoiNum(Long)
+ ChallengeReviewVO selectChallengeReviewByMemberAndChallenge(Map<String,Object>)
+ void insertChallengePayment(ChallengePaymentVO)
+ List<ChallengePaymentVO> selectChallengePaymentList(Long)
+ void insertChallengeVerify(ChallengeVerifyVO)
+ Integer selectChallengeVerifyListRowCount(Map<String,Object>)
+ List<ChallengeVerifyVO> selectChallengeVerifyList(Map<String,Object>)
+ ChallengeVerifyVO selectChallengeVerify(Long)
+ void updateChallengeVerify(ChallengeVerifyVO)
+ void deleteChallengeVerify(Long)
+ int countWeeklyVerify(Long,LocalDate,int)
+ Integer countTodayVerify(Long)
+ List<ChallengeJoinVO> selectJoinMemberList(Map<String,Object>)
+ Integer selectJoinMemberRowCount(Map<String,Object>)
+ void insertChallengeReview(ChallengeReviewVO)
+ List<ChallengeReviewVO> selectChallengeReviewList(Long)
+ ChallengeReviewVO selectChallengeReview(Long)
+ void updateChallengeReview(ChallengeReviewVO)
+ void deleteChallengeReview(Long)
+ Integer selectChallengeJoinListRowCount(Map<String,Object>)
+ void cancelChallengeJoin(Long,Long)
+ void cancelChallenge(Long)
+ void givePointsForReview(ChallengeReviewVO)
+ void insertChallengeChat(ChallengeChatVO)
+ List<ChallengeChatVO> selectChallengeChat(Map<String,Object>)
+ void deleteChallengeChat(Long)
+ ChallengeFavVO selectFav(ChallengeFavVO)
+ Integer selectFavCount(Long)
+ void insertFav(ChallengeFavVO)
+ void deleteFav(ChallengeFavVO)
+ void updateVerifyStatus(Map<String,Long>)
+ void insertVerifyReport(ChallengeVerifyRptVO)
+ void processTodayExpiredChallenges()
- void processChallenge(ChallengeVO)
+ void refundPointsToUsers(Long)
- int calculateReturnPoint(ChallengeJoinVO)
- int calculateAchieveRate(ChallengeJoinVO)
+ List<ChallengeVO> selectChallengeList(Map<String,Object>)
+ int selectChallengeCount(Map<String,Object>)
+ ChallengePaymentVO selectChallengePayment(Long)
+ List<ChallengeVO> getPopularChallenges()
+ List<ChallengeVO> getExerciseChallenges()
}


class kr.spring.goods.vo.PurchaseVO {
- Long purchase_num
- long mem_num
- long item_num
- String item_name
- String imp_uid
- String Merchant_uid
- int amount
- int pay_price
- String buyer_name
- String buyer_email
- String item_photo
- Date payDate
- int payStatus
- String deliveryStatus
- int pamount
- int totalAmount
- String delivery_address
- int point_used
- Long cartItemNum
- String cartItemPrice
- int cartQuantity
- String cartItemName
- String cartItemPhoto
- List<CartVO> cart_items
+ List<CartVO> getCart_items()
+ void setCart_items(List<CartVO>)
+ long getMem_num()
+ void setMem_num(long)
}


class kr.spring.DontGibuUpApplicationTests {
~ void contextLoads()
}

interface kr.spring.data.service.DataService {
+ TotalVO selectTotalMain()
}

class kr.spring.dbox.vo.DboxBudgetVO {
- String dbox_bud_purpose
- long dbox_bud_price
- long dbox_num
}

class kr.spring.goods.vo.GoodsVO {
- Long item_status
- long item_num
- Long dcate_num
- String item_name
- String item_photo
- String item_detail
- Long item_price
- Long item_stock
- Date item_reg_date
- Date item_mdate
- MultipartFile upload
}

class kr.spring.cs.service.CSServiceImpl {
~ CSMapper csMapper
~ MemberMapper memberMapper
~ NotifyService notifyService
+ void insertInquiry(InquiryVO)
+ InquiryVO selectInquiryDetail(long)
+ List<InquiryVO> selectInquiryList(Map<String,Object>)
+ int selectInquiryListCount(Map<String,Object>)
+ List<InquiryVO> selectInquiryListByMemNum(long)
+ void updateInquiry(InquiryVO)
+ void deleteInquiry(long)
+ void replyInquiry(InquiryVO)
+ List<FaqVO> selectFaqList(Map<String,Object>)
+ long insertFaq(FaqVO)
+ void updateFaq(FaqVO)
+ void deleteFaq(long)
+ void insertReport(ReportVO)
+ int selectReportListCount(Map<String,Object>)
+ List<ReportVO> selectReportList(Map<String,Object>)
+ ReportVO selectReportDetail(long)
+ void replyReport(ReportVO)
+ void deleteReport(long)
+ List<ReportVO> selectReportListByMemNum(long)
}


class kr.spring.main.controller.MainController {
~ DataService dataService
- ChallengeService challengeService
- GoodsService goodsService
- DboxService dboxService
- CategoryService categoryService
+ String init()
+ String main(Model)
+ String adminMain()
+ String main2()
}


class kr.spring.category.controller.CategoryAjaxController {
- CategoryService categoryService
+ Map<String,String> processFile(Long,HttpSession,HttpServletRequest)
}


class kr.spring.payuid.controller.PayuidController {
- PayuidService payuidService
}

interface kr.spring.cs.dao.CSMapper {
+ void insertInquiry(InquiryVO)
+ InquiryVO selectInquiryDetail(long)
+ List<InquiryVO> selectInquiryList(Map<String,Object>)
+ int selectInquiryListCount(Map<String,Object>)
+ List<InquiryVO> selectInquiryListByMemNum(long)
+ void updateInquiry(InquiryVO)
+ void deleteInquiry(long)
+ void replyInquiry(InquiryVO)
+ List<FaqVO> selectFaqList(Map<String,Object>)
+ void insertFaq(FaqVO)
+ void updateFaq(FaqVO)
+ void deleteFaq(long)
+ long selectFaqNum()
+ void insertReport(ReportVO)
+ int selectReportListCount(Map<String,Object>)
+ List<ReportVO> selectReportList(Map<String,Object>)
+ ReportVO selectReportDetail(long)
+ void replyReport(ReportVO)
+ void deleteReport(long)
+ List<ReportVO> selectReportListByMemNum(long)
}

class kr.spring.notify.vo.NotifyVO {
- long not_num
- long mem_num
- int notify_type
- String not_message
- String not_url
- String not_datetime
- Date not_read_datetime
}

class kr.spring.member.controller.MyPageController {
~ MemberService memberService
~ PointService pointService
~ CSService csService
~ DboxService dboxService
~ MemberDeleteService memberDeleteService
+ MemberVO initCommandMember()
+ InquiryVO initCommandInquiry()
+ String myPage()
+ String memberInfo(HttpSession,Model)
+ String updateMemberInfo(MemberVO,BindingResult,HttpSession,Model)
+ String changePasswordForm(Model,HttpSession)
+ String changePassword(MemberVO,BindingResult,Model,HttpServletRequest,HttpSession)
+ String deleteAccountForm(Model,HttpSession)
+ String deleteAccount(MemberVO,BindingResult,Model,HttpServletRequest,HttpSession)
+ String inviteFriendEvent(HttpSession,Model)
+ String memberPoint(int,HttpSession,Model)
+ String memberPayment(int,HttpSession,Model)
+ String memberInquiry(Model,HttpSession)
+ String memberInquiryDetail(long,Model)
+ String download(long,HttpServletRequest,Model)
+ String modifyForm(long,Model)
+ String modify(InquiryVO,BindingResult,HttpServletRequest,HttpSession,Model)
+ String deleteInquiry(long)
+ String memberReport(Model,HttpSession)
+ String memberReportDetail(long,Model)
+ String downloadReport(long,HttpServletRequest,Model)
+ String deleteReport(long)
+ String dboxMyPropose(int,HttpSession,Model)
+ String dboxMyDonation()
}


interface kr.spring.point.dao.PointMapper {
+ void insertPointLog(PointVO)
+ List<PointVO> getMemberPointList(Map<String,Object>)
+ Integer getMPointRowCount(Map<String,Object>)
}

class kr.spring.websocket.SocketHandler {
- Map<String,WebSocketSession> users
- ObjectMapper objectMapper
+ void afterConnectionEstablished(WebSocketSession)
+ void afterConnectionClosed(WebSocketSession,CloseStatus)
# void handleTextMessage(WebSocketSession,TextMessage)
- void handleChatMessage(WebSocketSession,JsonNode)
- void handleUpdateReadCount(JsonNode)
+ void handleTransportError(WebSocketSession,Throwable)
}


class kr.spring.category.service.CategoryServiceImpl {
~ CategoryMapper categoryMapper
+ void insertDonationCategory(DonationCategoryVO)
+ List<DonationCategoryVO> selectList()
+ List<DonationCategoryVO> selectListNoPage()
+ DonationCategoryVO selectDonationCategory(Long)
+ void updateDonationCategory(DonationCategoryVO)
+ void deleteDonationCategory(Long)
+ int getListCount(Map<String,Object>)
+ void deleteFile(Long)
+ void insertChallengeCategory(ChallengeCategoryVO)
+ int getChalCateCount(Map<String,Object>)
+ List<ChallengeCategoryVO> selectChalCateList()
+ ChallengeCategoryVO selectChallengeCategory(Long)
+ void updateChallengeCategory(ChallengeCategoryVO)
+ void deleteChallengeCategory(Long)
}


class kr.spring.view.DownloadView {
# void renderMergedOutputModel(Map<String,Object>,HttpServletRequest,HttpServletResponse)
}

class kr.spring.util.PagingUtil {
- int startRow
- int endRow
- StringBuffer page
+ <<Create>> PagingUtil(int,int,int)
+ <<Create>> PagingUtil(int,int,int,int,String)
+ <<Create>> PagingUtil(int,int,int,int,String,String)
+ <<Create>> PagingUtil(String,String,int,int,int,int,String)
+ <<Create>> PagingUtil(String,String,int,int,int,int,String,String)
+ StringBuffer getPage()
+ int getStartRow()
+ int getEndRow()
}


class kr.spring.subscription.controller.SubscriptionController {
- SubscriptionService subscriptionService
- PayuidService payuidService
- CategoryService categoryService
- MemberService memberService
- Sub_paymentService sub_paymentService
~ NotifyService notifyService
~ CSService csService
~ RefundService refundService
~ GoodsService goodsService
~ DboxService dboxService
- IamportClient impClient
- String apiKey
- String secretKey
+ void initImp()
+ String subScriptionMain(Model)
+ String signup(SubscriptionVO,Model,HttpServletRequest,HttpSession,RedirectAttributes,String)
+ String getpayuid(MemberVO,PayuidVO,SubscriptionVO,Model)
+ Map getNewpayuid(SubscriptionVO,Model,HttpServletRequest,RedirectAttributes)
+ ResponseEntity<Map<String,String>> signUp(String,long)
+ String showResult(Model)
+ Map<String,String> deletePayuid(String,long,HttpSession)
+ String insertSub_Payment(String,long)
+ void SubscriptionPayment()
+ void performDailyTask()
+ {static} int getNextDayOfMonthAsInt(LocalDate)
+ String subscriptionList(HttpSession,Model,int,String,String,String)
+ String paymentHistory(HttpSession,Model,int,String,String,String)
+ ModelAndView subscriptionDetail(long,Model)
+ Map<String,String> updateSub_status(long,HttpSession)
+ String getListRefund(HttpSession,Model,int,int)
+ String getSubscriptionList(HttpSession,Model,int,String,String)
+ Map<String,String> insertRefund(HttpServletRequest,HttpSession,RefundVO,long)
+ Map<String,String> refund(RefundVO,HttpSession)
+ Map<String,String> approvalRefund(RefundVO,HttpSession)
+ Map<String,String> insertRefundByType(HttpServletRequest,HttpSession,RefundVO)
}


class kr.spring.main.controller.CommonController {
+ Map<String,Object> uploadImage(MultipartFile,HttpSession,HttpServletRequest,HttpServletResponse)
}

class kr.spring.config.SchedulerConfig {
+ ThreadPoolTaskScheduler taskScheduler()
}

class kr.spring.util.RCodeGenerator {
- {static} String CHARACTERS
- {static} int CODE_LENGTH
- {static} Random RANDOM
+ {static} String generateRCode()
}


class kr.spring.cs.vo.InquiryVO {
- Long inquiry_num
- long mem_num
- Integer inquiry_category
- String inquiry_title
- String inquiry_filename
- String inquiry_content
- String inquiry_reply
- Date inquiry_date
- Date inquiry_rdate
- MultipartFile upload
- String file_deleted
- String mem_nick
- String mem_email
}

class kr.spring.challenge.vo.ChallengeReviewVO {
- long chal_rev_num
- long chal_num
- long mem_num
- String chal_rev_ip
- Date chal_rev_date
- Date chal_rev_mdate
- int chal_rev_grade
- String chal_rev_content
- String mem_nick
- String mem_photo
}

interface kr.spring.dbox.vo.DboxValidationGroup_2 {
}
interface kr.spring.refund.dao.RefundMapper {
+ void insertRefund(RefundVO)
+ int getRefundCount(Map<String,Object>)
+ List<RefundVO> getRefundList(Map<String,Object>)
+ List<RefundVO> getRefundListByMemnum(Map<String,Object>)
+ void deleteRefund(long)
+ RefundVO getRefundVOByReNum(long)
+ void updateRefundStatus(long,int)
}

class kr.spring.cart.service.CartServiceImpl {
~ CartMapper cartMapper
+ void insertOrUpdateCart(CartVO)
+ List<CartVO> cartList(Map<String,Object>)
+ Integer cartRowCount(Map<String,Object>)
+ void deleteCart(int)
+ void updateCartQuantity(int,int)
}


interface kr.spring.member.service.MemberOAuthService {
+ String getKakaoAccessToken(String)
+ UserInfo getKakaoInfo(String)
+ void kakaoDisconnect(String)
+ String getNaverAccessToken(String,String)
+ UserInfo getNaverInfo(String)
}

interface kr.spring.member.service.MemberService {
+ void insertMember(MemberVO)
+ boolean isCheckedPassword(MemberVO,String)
+ MemberVO selectMember(Long)
+ MemberVO selectMemberDetail(Long)
+ MemberVO selectMemberByEmail(String)
+ MemberVO selectMemberByNick(String)
+ String generateUniqueRCode()
+ boolean checkIfRCodeIsUnique(String)
+ Long selectMemNumByRCode(String)
+ MemberTotalVO selectMemberTotal(long)
+ int selectMemberPaymentCount(Map<String,Object>)
+ List<PaymentVO> selectMemberPayment(Map<String,Object>)
+ void updateMemPhoto(MemberVO)
+ void updateMember(MemberVO)
+ void updatePassword(MemberVO)
+ String getPasswordVerificationCode()
+ void updateMemPoint(PointVO)
+ List<MemberVO> selectMemberList(Map<String,Object>)
+ int selectMemberCount(Map<String,Object>)
+ void updateMemStatus(MemberVO)
+ void updateMemAuth(long,int)
}

class kr.spring.member.service.MemberDeleteServiceImpl {
~ MemberMapper memberMapper
~ PointService pointService
~ NotifyService notifyService
~ PasswordEncoder pwEncoder
~ CartMapper cartMapper
~ ChallengeMapper challengeMapper
~ DeleteMapper deleteMapper
~ MemberService memberService
- IamportClient impClient
- String apiKey
- String secretKey
+ void initImp()
+ void deleteAccount(long)
}


class kr.spring.cs.vo.FaqVO {
- long faq_num
- int faq_category
- String faq_question
- String faq_answer
+ <<Create>> FaqVO(int,String,String)
+ <<Create>> FaqVO(long,String,String)
}


class kr.spring.member.vo.PaymentVO {
- int type
- String payment_id
- String id
- String mem_num
- String price
- String donation
- String point
- String status
- String pay_date
- String ref
}

class kr.spring.subscription.vo.Sub_paymentVO {
- long sub_pay_num
- long mem_num
- long sub_num
- int sub_price
- String sub_pay_date
- int sub_pay_status
- long dcate_num
- String dcate_name
- String dcate_charity
- String sub_method
- String easypay_method
- String card_nickname
}

class kr.spring.refund.service.RefundServiceImpl {
~ RefundMapper refundMapper
+ void insertRefund(RefundVO)
+ List<RefundVO> getRefundList(Map<String,Object>)
+ List<RefundVO> getRefundListByMemnum(Map<String,Object>)
+ void deleteRefund(long)
+ void updateRefundStatus(long,int)
+ int getRefundCount(Map<String,Object>)
+ RefundVO getRefundVOByReNum(long)
}


class kr.spring.config.validation.ValidationGroups {
}
interface kr.spring.config.validation.ValidationGroups$NotNullGroup {
}
interface kr.spring.config.validation.ValidationGroups$PatternCheckGroup {
}
interface kr.spring.config.validation.ValidationGroups$SizeCheckGroup {
}
interface kr.spring.config.validation.ValidationGroups$TypeCheckGroup {
}
class kr.spring.goods.service.PurchaseServiceImpl {
- PurchaseMapper purchaseMapper
- GoodsMapper goodsMapper
~ NotifyService notifyService
+ void insertPurchase(PurchaseVO)
+ void insertPurchaseWithCartItems(PurchaseVO)
+ List<CartVO> getPurchaseItems(long)
+ List<PurchaseVO> getPurchaseListByMember(long)
+ Long getLastInsertedPurchaseNum()
+ List<PurchaseVO> getAllPurchases()
+ PurchaseVO getPurchaseByImpUid(String)
+ void updateDeliveryStatus(int,String)
+ void updateDeliveryStatusByImpUid(String,String)
+ void updateRefundStatus(String,int)
+ Long getSeq()
+ void insertPurchaseItems(CartVO)
+ void updateStock(Long,Long,Integer)
+ void updateStock(Map<String,Object>)
}


class kr.spring.dbox.vo.DboxFavVO {
- long dbox_num
- long mem_num
}

class kr.spring.subscription.vo.GetTokenVO {
- String access_token
- long now
- long expired_at
}

class kr.spring.goods.controller.adminController {
- PurchaseService purchaseService
- NotifyService notifyService
+ String getPurchaseList(Model)
+ String updateDeliveryStatus(String,String)
}


class kr.spring.dbox.service.DboxServiceImpl {
~ DboxMapper dboxMapper
~ SubscriptionMapper subscriptionMapper
~ MemberMapper memberMapper
~ NotifyMapper notifyMapper
~ SubscriptionService subscriptionService
+ Long insertDbox(DboxVO)
+ void updateDboxStatus(long,int)
+ void updateDboxAcomment(long,String)
+ Integer selectListCount(Map<String,Object>)
+ List<DboxVO> selectList(Map<String,Object>)
+ Integer selectAdminListCount(Map<String,Object>)
+ List<DboxVO> selectAdminList(Map<String,Object>)
+ List<DboxVO> selectStatusUpdateList(int)
+ List<DboxVO> mainDboxList()
+ DboxVO selectDbox(long)
+ List<DboxBudgetVO> selectDboxBudgets(long)
+ void insertDboxDonation(DboxDonationVO)
+ List<DboxDonationVO> selectDboxDonations(long)
+ Integer selectDboxDonationsCount(long)
+ Long selecDoantionTotal(long)
+ DboxResultVO selectDboxResult(long)
+ void updatePayStatus(long,long)
+ int getDboxCountbyMem_num(Map<String,Object>)
+ List<DboxVO> getDboxByMem_num(Map<String,Object>)
+ List<DboxDonationVO> getDboxDonationVODboxNum(long)
+ void refund(RefundVO,DboxDonationVO)
}


class kr.spring.category.vo.ChallengeCategoryVO {
- int ccate_num
- String ccate_name
}

class kr.spring.refund.vo.RefundVO {
- long refund_num
- long mem_num
- int payment_type
- String imp_uid
- int amount
- int reason
- String reason_other
- int return_point
- String reg_date
- String refund_date
- int refund_status
- long id
}

class kr.spring.DontGibuUpApplication {
+ {static} void main(String[])
}

interface kr.spring.payuid.dao.PayuidMapper {
+ void registerPayUId(PayuidVO)
+ void deletePayuid(String)
+ List<PayuidVO> getPayUId(long)
+ PayuidVO getPayuidByMethod(PayuidVO)
+ PayuidVO getPayuidVOByPayuid(String)
+ String generateUUIDFromMem_num(long)
}

class kr.spring.cs.vo.ReportVO {
- long report_num
- long mem_num
- long reported_mem_num
- Integer report_type
- String report_content
- String report_filename
- String report_reply
- Date report_rdate
- Integer report_status
- Date report_date
- String mem_nick
- String reported_mem_nick
- int reported_mem_status
- Integer report_source
- Long chal_num
- Long chal_rev_num
- Long dbox_re_num
- MultipartFile upload
}

class kr.spring.util.CaptchaUtil {
+ {static} String get(String,Map<String,String>)
+ {static} byte[] getCaptchaImage(String,Map<String,String>)
- {static} byte[] getImage(InputStream)
- {static} HttpURLConnection connect(String)
- {static} String readBody(InputStream)
}

class kr.spring.challenge.vo.ChallengePaymentVO {
- long chal_pay_num
- long chal_joi_num
- long mem_num
- String od_imp_uid
- int chal_pay_price
- int chal_point
- Date chal_pay_date
- int chal_pay_status
- long chal_num
}

interface kr.spring.point.service.PointService {
+ void insertPointLog(PointVO)
+ List<PointVO> getMemberPointList(Map<String,Object>)
+ Integer getMPointRowCount(Map<String,Object>)
+ void updateMemPointByAdmin(PointVO)
}

class kr.spring.interceptor.LoginCheckInterceptor {
+ boolean preHandle(HttpServletRequest,HttpServletResponse,Object)
}

interface kr.spring.challenge.service.ChallengeService {
+ void insertChallenge(ChallengeVO,ChallengeJoinVO,ChallengePaymentVO,ChallengeChatVO)
+ List<ChallengeVO> selectList(Map<String,Object>)
+ Integer selectRowCount(Map<String,Object>)
+ ChallengeVO selectChallenge(Long)
+ void updateChallenge(Long)
+ void cancelChallenge(Long)
+ void deleteChalPhoto(Long)
+ int countCurrentParticipants(long)
+ void insertChallengeJoin(ChallengeJoinVO,ChallengePaymentVO)
+ Integer selectChallengeJoinListRowCount(Map<String,Object>)
+ List<ChallengeJoinVO> selectChallengeJoinList(Map<String,Object>)
+ ChallengeJoinVO selectChallengeJoin(Long)
+ Integer selectJoinMemberRowCount(Map<String,Object>)
+ List<ChallengeJoinVO> selectJoinMemberList(Map<String,Object>)
+ void deleteChallengeJoinsByChallengeId(Long)
+ void cancelChallengeJoin(Long,Long)
+ boolean isChallengeLeader(Long,Long)
+ Long selectLeaderJoiNum(Long)
+ ChallengeReviewVO selectChallengeReviewByMemberAndChallenge(Map<String,Object>)
+ void insertChallengePayment(ChallengePaymentVO)
+ ChallengePaymentVO selectChallengePayment(Long)
+ List<ChallengePaymentVO> selectChallengePaymentList(Long)
+ void insertChallengeVerify(ChallengeVerifyVO)
+ Integer selectChallengeVerifyListRowCount(Map<String,Object>)
+ List<ChallengeVerifyVO> selectChallengeVerifyList(Map<String,Object>)
+ ChallengeVerifyVO selectChallengeVerify(Long)
+ void updateChallengeVerify(ChallengeVerifyVO)
+ void deleteChallengeVerify(Long)
+ int countWeeklyVerify(Long,LocalDate,int)
+ Integer countTodayVerify(Long)
+ void updateVerifyStatus(Map<String,Long>)
+ void insertVerifyReport(ChallengeVerifyRptVO)
+ void insertChallengeReview(ChallengeReviewVO)
+ List<ChallengeReviewVO> selectChallengeReviewList(Long)
+ ChallengeReviewVO selectChallengeReview(Long)
+ void updateChallengeReview(ChallengeReviewVO)
+ void deleteChallengeReview(Long)
+ void insertChallengeChat(ChallengeChatVO)
+ List<ChallengeChatVO> selectChallengeChat(Map<String,Object>)
+ void deleteChallengeChat(Long)
+ ChallengeFavVO selectFav(ChallengeFavVO)
+ Integer selectFavCount(Long)
+ void insertFav(ChallengeFavVO)
+ void deleteFav(ChallengeFavVO)
+ void processTodayExpiredChallenges()
+ void refundPointsToUsers(Long)
+ List<ChallengeVO> selectChallengeList(Map<String,Object>)
+ int selectChallengeCount(Map<String,Object>)
+ List<ChallengeVO> getPopularChallenges()
+ List<ChallengeVO> getExerciseChallenges()
}

class kr.spring.goods.util.fileUtil {
+ {static} String createFile(HttpServletRequest,MultipartFile)
}

class kr.spring.data.service.DataServiceImpl {
~ DataMapper dataMapper
+ TotalVO selectTotalMain()
}


class kr.spring.util.FileUtil {
- {static} String UPLOAD_PATH
+ {static} String createFile(HttpServletRequest,MultipartFile)
+ {static} String createFileDbox(HttpServletRequest,MultipartFile)
+ {static} void removeFile(HttpServletRequest,String)
+ {static} void removeFileDbox(HttpServletRequest,String)
+ {static} byte[] getBytes(String)
}


class kr.spring.cart.controller.CartController {
- CartService cartService
+ CartVO initCommand()
+ String insertCart(long,long,int,Long,HttpServletRequest,Model)
+ String getList(int,Model,HttpSession)
+ String deleteCart(int)
+ String deleteSelectedCarts(List<Integer>)
+ String updateCartQuantity(int,int)
}


interface kr.spring.cart.dao.CartMapper {
+ List<CartVO> cartList(Map<String,Object>)
+ Integer cartRowCount(Map<String,Object>)
~ int checkCartItem(CartVO)
~ void updateCartQuantity(CartVO)
~ void insertCart(CartVO)
+ void deleteCart(int)
~ CartVO selectCart(int)
+ void updateCartQuantityByCartNum(int,int)
+ List<CartVO> deleteCartsByMember(long)
}

class kr.spring.challenge.vo.ChallengeVerifyRptVO {
- long report_mem_num
- long chal_ver_num
- long reported_joi_num
}

class kr.spring.interceptor.MemStatusCheckInterceptor {
+ boolean preHandle(HttpServletRequest,HttpServletResponse,Object)
}

interface kr.spring.goods.dao.GoodsMapper {
+ List<GoodsVO> selectList(Map<String,Object>)
+ Integer selectRowCount(Map<String,Object>)
+ void insertGoods(GoodsVO)
+ GoodsVO detailGoods(long)
+ void updateGoods(GoodsVO)
+ void deleteGoods(long)
+ void deleteCartItems(long)
~ void updateStock(Map<String,Object>)
+ GoodsVO selectTodayGoods()
~ List<Map<String,Object>> getCategories()
+ void updatePayStatus(long,long)
}

class kr.spring.interceptor.WriterCheckInterceptor {
- CSService csService
+ boolean preHandle(HttpServletRequest,HttpServletResponse,Object)
}


class kr.spring.subscription.service.Sub_paymentServiceImpl {
~ Sub_paymentMapper Sub_paymentMapper
+ void insertSub_payment(Sub_paymentVO)
+ long getSub_payment_num()
+ Sub_paymentVO getSub_paymentByDate(long)
+ List<Sub_paymentVO> getSub_payment()
+ List<Sub_paymentVO> getSub_paymentByMem_num(Map<String,Object>)
+ int getSub_paymentCountByMem_num(Map<String,Object>)
+ List<Sub_paymentVO> getSub_paymentBySub_num(long)
+ void updateSubPayStatus(long,long)
}


class kr.spring.cart.vo.CartVO {
- long cart_num
- long item_num
- long mem_num
- Long cart_quantity
- long purchase_num
- int item_price
- GoodsVO goods
}

class kr.spring.config.AppConfig {
- LoginCheckInterceptor loginCheck
- WriterCheckInterceptor writerCheck
- MemStatusCheckInterceptor memStatusCheck
+ LoginCheckInterceptor interceptor2()
+ MemStatusCheckInterceptor interceptor3()
+ WriterCheckInterceptor interceptor4()
+ void addInterceptors(InterceptorRegistry)
+ TilesConfigurer tilesConfigurer()
+ TilesViewResolver tilesViewResolver()
+ RestTemplate restTemplate()
+ ThreadPoolTaskScheduler taskScheduler()
+ Gson gson()
+ void registerWebSocketHandlers(WebSocketHandlerRegistry)
}


class kr.spring.payuid.service.PayuidServiceImpl {
~ PayuidMapper payuidMapper
+ void registerPayUId(PayuidVO)
+ void deletePayuid(String)
+ List<PayuidVO> getPayUId(long)
+ PayuidVO getPayuidByMethod(PayuidVO)
+ PayuidVO getPayuidVOByPayuid(String)
+ String generateUUIDFromMem_num(long)
}


class kr.spring.payuid.vo.PayuidVO {
- String pay_uid
- long mem_num
- String card_nickname
- String easypay_method
- String sub_method
}

class kr.spring.member.controller.MemberAjaxController {
- MemberService memberService
- PointService pointService
- NotifyService notifyService
+ Map<String,String> checkEmail(MemberVO)
+ Map<String,String> checkNick(MemberVO,HttpSession)
+ Map<String,Object> verifyVCode(String,HttpSession)
+ Map<String,Object> getUnreadCount(HttpSession,Model)
+ Map<String,Object> getNotification(HttpSession)
+ Map<String,Object> readNotification(long,HttpSession)
+ Map<String,Object> suspendMemberAjax(long,HttpSession)
+ Map<String,Object> activateMemberAjax(long,HttpSession)
+ Map<String,Object> updatePointAjax(long,int,HttpSession)
}


class kr.spring.data.vo.TotalVO {
~ int total_count
~ long total_amount
}

class kr.spring.member.service.MemberOAuthServiceImpl {
- String k_client_id
- String k_redirect_uri
- String k_client_secret
- String n_client_id
- String n_redirect_uri
- String n_client_secret
+ String getKakaoAccessToken(String)
+ UserInfo getKakaoInfo(String)
+ void kakaoDisconnect(String)
+ String getNaverAccessToken(String,String)
+ UserInfo getNaverInfo(String)
}


interface kr.spring.notify.service.NotifyService {
+ void insertNotifyLog(NotifyVO,Map<String,String>)
+ List<NotifyVO> selectNotListByMemNum(long)
+ int countUnreadNot(long)
+ void readNotifyLog(long)
}

class kr.spring.dbox.vo.DboxDonationVO {
- long dbox_do_num
- long dbox_num
- long mem_num
- long dbox_do_price
- int dbox_do_point
- String dbox_imp_uid
- String dbox_do_comment
- int dbox_do_status
- int dbox_do_annony
- Date dbox_do_reg_date
- String mem_nick
- String mem_photo
}

class kr.spring.view.ImageView {
# void renderMergedOutputModel(Map<String,Object>,HttpServletRequest,HttpServletResponse)
}

class kr.spring.challenge.vo.ChallengeVO {
- long chal_num
- long mem_num
- int chal_public
- int chal_type
- String chal_title
- String chal_content
- MultipartFile upload
- String chal_photo
- String chal_verify
- Integer chal_freq
- String chal_sdate
- Integer chal_period
- Integer chal_fee
- Integer chal_max
- Date chal_rdate
- String chal_ip
- Integer chal_status
- String chal_edate
- String mem_nick
- String mem_photo
- String categoryName
- Integer chal_phase
+ void calculateChalEdate()
}


interface kr.spring.category.service.CategoryService {
+ void insertDonationCategory(DonationCategoryVO)
+ int getListCount(Map<String,Object>)
+ List<DonationCategoryVO> selectList()
+ List<DonationCategoryVO> selectListNoPage()
+ DonationCategoryVO selectDonationCategory(Long)
+ void updateDonationCategory(DonationCategoryVO)
+ void deleteDonationCategory(Long)
+ void deleteFile(Long)
+ void insertChallengeCategory(ChallengeCategoryVO)
+ int getChalCateCount(Map<String,Object>)
+ List<ChallengeCategoryVO> selectChalCateList()
+ ChallengeCategoryVO selectChallengeCategory(Long)
+ void updateChallengeCategory(ChallengeCategoryVO)
+ void deleteChallengeCategory(Long)
}

interface kr.spring.dbox.dao.DboxMapper {
+ Long selectDboxNum()
+ Long insertDbox(DboxVO)
+ void insertDboxBudget(DboxBudgetVO)
+ Long curDboxNum()
+ void updateDboxStatus(long,int)
+ void updateDboxAcomment(long,String)
+ Integer selectListCount(Map<String,Object>)
+ List<DboxVO> selectList(Map<String,Object>)
+ Integer selectAdminListCount(Map<String,Object>)
+ List<DboxVO> selectAdminList(Map<String,Object>)
+ List<DboxVO> selectStatusUpdateList(int)
+ List<DboxVO> mainDboxList()
+ DboxVO selectDbox(long)
+ List<DboxBudgetVO> selectDboxBudgets(long)
+ void insertDboxDonation(DboxDonationVO)
+ List<DboxDonationVO> selectDboxDonations(long)
+ Integer selectDboxDonationsCount(long)
+ Long selecDoantionTotal(long)
+ DboxResultVO selectDboxResult(long)
+ void updatePayStatus(long,long)
+ int getDboxCountbyMem_num(Map<String,Object>)
+ List<DboxVO> getDboxByMem_num(Map<String,Object>)
+ List<DboxDonationVO> getDboxDonationVODboxNum(long)
}

class kr.spring.category.controller.CategoryController {
- CategoryService categoryService
- PayuidService payuidService
+ String categoryList(Model)
+ String insertCategoryForm(Model)
+ ModelAndView detailCategory(long,HttpSession,Model)
+ String submitDelete(long,HttpServletRequest)
+ String formUpdate(long,Model)
+ String submitUpdate(DonationCategoryVO,BindingResult,Model,HttpServletRequest)
}


class kr.spring.category.controller.CategoryController$DonationCategoryController {
- CategoryService categoryService
+ String submit(DonationCategoryVO,BindingResult,HttpServletRequest,HttpSession,Model)
}


class kr.s04.array.ArrayMain10 {
+ {static} void main(String[])
}

interface kr.spring.notify.dao.NotifyMapper {
+ void insertNotifyLog(NotifyVO)
+ List<NotifyVO> selectNotListByMemNum(long)
+ int countUnreadNot(long)
+ void readNotifyLog(long)
+ String selectNotifyTemplate(int)
+ void insertNotifyLog(NotifyVO,Map<String,String>)
}

class kr.spring.dbox.controller.DboxController {
- DboxService dboxService
- CategoryService categoryService
- NotifyService notifyService
+ DboxVO initCommand()
+ String list()
+ String detailContent(long,Model,HttpSession)
+ String detailDonators(long,Model,HttpSession)
+ String detailNews(long,Model,HttpSession)
+ String donation(long,Model)
+ String proposeForm()
+ String proposeStep1(HttpSession,Model)
+ String Step1Submit(DboxVO,BindingResult,HttpSession)
+ String proposeStep2(HttpSession)
+ String Step2Submit(DboxVO,BindingResult,HttpSession,HttpServletRequest)
+ String proposeStep3(HttpSession)
+ String Step3Submit(DboxVO,BindingResult,HttpSession,HttpServletRequest)
+ String proposeEnd(HttpSession,Model)
+ String proposeExample(long,Model,HttpSession)
}


class kr.spring.challenge.controller.ChallengeController {
- ChallengeService challengeService
- CategoryService categoryService
+ ChallengeVO initChallengeVO()
+ ChallengeJoinVO initChallengeJoinVO()
+ ChallengeReviewVO initChallengeReviewVO()
+ void initBinder(WebDataBinder)
+ String form()
+ String checkValidation(ChallengeVO,BindingResult,HttpServletRequest,HttpSession,Model)
+ String list(Model)
+ String pastList(Model)
+ ModelAndView chalDetail(long,HttpSession)
+ String joinForm(long,HttpSession,Model)
+ String joinForm(Model,HttpSession)
+ String list(String,String,Model,HttpSession,int)
+ String joinChallengeChatRedirect(HttpSession,Model)
+ String verifyForm(long,Model)
+ String submitVerify(ChallengeVerifyVO,long,BindingResult,HttpServletRequest,HttpSession,Model)
+ ModelAndView verifyList(long,long,String,int)
+ ResponseEntity<String> updateVerify(long,String)
+ ResponseEntity<String> deleteVerify(long)
+ String reviewForm(long,Model)
+ String writeReview(ChallengeReviewVO,BindingResult,HttpServletRequest,HttpSession,Model)
+ String reviewList(long,String,Model)
+ ResponseEntity<String> refundPointsToUsers(Long)
+ String adminChallengeList(int,int,String,String,Model)
+ ModelAndView adminChallengeDetail(long,HttpSession)
}


class kr.spring.util.StringUtil {
+ {static} String useBrHtml(String)
+ {static} String useBrNoHTML(String)
+ {static} String useNoHTML(String)
+ {static} String parseQuot(String)
}

class kr.spring.notify.service.NotifyServiceImpl {
~ NotifyMapper notifyMapper
+ void insertNotifyLog(NotifyVO,Map<String,String>)
+ List<NotifyVO> selectNotListByMemNum(long)
+ int countUnreadNot(long)
+ void readNotifyLog(long)
- String generateNotifyMessage(NotifyVO,Map<String,String>)
}


class kr.spring.dbox.vo.DboxVO {
- long dbox_num
- long mem_num
- long dcate_num
- int dbox_team_type
- String dbox_team_name
- String dbox_team_detail
- String dbox_team_photo
- String dbox_business_rnum
- String dbox_title
- String dbox_photo
- String dbox_content
- String dbox_business_plan
- String dbox_budget_data
- String dbox_bank
- String dbox_account
- String dbox_account_name
- String dbox_comment
- long dbox_goal
- String dbox_sdate
- String dbox_edate
- Date dbox_rdate
- int dbox_status
- String dbox_acomment
- MultipartFile dbox_team_photo_file
- MultipartFile dbox_business_plan_file
- MultipartFile dbox_budget_data_file
- MultipartFile dbox_photo_file
- DboxBudgetVO dboxBudget
- List<DboxBudgetVO> dboxBudgets
- String dcate_name
- String dcate_icon
- long total
}

interface kr.spring.dbox.vo.DboxValidationGroup_3 {
}
class kr.spring.dbox.controller.DboxAjaxController {
- DboxService dboxService
- CategoryService categoryService
- PointService pointService
- MemberService memberService
- NotifyService notifyService
- IamportClient impClient
- String apiKey
- String secretKey
+ Map<String,Object> getList(int,int,int,String,String,String,HttpSession)
+ void initImp()
+ IamportResponse<Payment> validateIamportWrite(String,Map<String,Object>,HttpSession,HttpServletRequest)
+ Map<String,String> dboxDonation(Map<String,Object>,HttpSession,HttpServletRequest)
}


interface kr.spring.delete.dao.DeleteMapper {
+ void deleteChatReadsByMember(long)
+ void deleteVerifyRptsByMember(long)
+ void deleteVerifiesByMember(long)
+ void updateChalJoinStatusesByMember(long)
+ List<Long> selectChallengesByMember(long)
+ List<ChallengePaymentVO> selectChalPayListByChalNum(long)
+ List<ChallengePaymentVO> selectNonLeaderChallengesByMember(long)
+ void deleteInquiriesByMember(long)
+ void deleteNotifyLogsByMember(long)
+ void deletePayUidsByMember(long)
+ void deletePointLogsByMember(long)
+ void deleteRefundsByMember(long)
+ void deleteReportsByMember(long)
+ void cancelSubscriptionByMember(long)
}

interface kr.spring.category.dao.CategoryMapper {
+ void insertDonationCategory(DonationCategoryVO)
+ int getListCount(Map<String,Object>)
+ List<DonationCategoryVO> selectList()
+ List<DonationCategoryVO> selectListNoPage()
+ DonationCategoryVO selectDonationCategory(Long)
+ void updateDonationCategory(DonationCategoryVO)
+ void deleteDonationCategory(Long)
+ void deleteFile(Long)
+ void insertChallengeCategory(ChallengeCategoryVO)
+ int getChalCateCount(Map<String,Object>)
+ List<ChallengeCategoryVO> selectChalCateList()
+ ChallengeCategoryVO selectChallengeCategory(Long)
+ void updateChallengeCategory(ChallengeCategoryVO)
+ void deleteChallengeCategory(Long)
}

class kr.spring.subscription.vo.SubscriptionVO {
- long sub_num
- long mem_num
- long dcate_num
- String sub_name
- boolean sub_annoy
- int sub_price
- int sub_ndate
- int sub_status
- String sub_method
- String easypay_method
- String card_nickname
- String reg_date
- String cancel_date
- String dcate_charity
- String dcate_name
- DonationCategoryVO donationCategory
}

interface kr.spring.challenge.dao.ChallengeMapper {
+ Long selectChal_num()
+ void insertChallenge(ChallengeVO)
+ List<ChallengeVO> selectList(Map<String,Object>)
+ Integer selectRowCount(Map<String,Object>)
+ ChallengeVO selectChallenge(Long)
+ void updateChallengeStatus(Long)
+ void deleteChalPhoto(Long)
+ int countCurrentParticipants(long)
+ Long selectChal_joi_num()
+ void insertChallengeJoin(ChallengeJoinVO)
+ Integer selectChallengeJoinListRowCount(Map<String,Object>)
+ List<ChallengeJoinVO> selectChallengeJoinList(Map<String,Object>)
+ ChallengeJoinVO selectChallengeJoin(Long)
+ Integer selectJoinMemberRowCount(Map<String,Object>)
+ List<ChallengeJoinVO> selectJoinMemberList(Map<String,Object>)
+ Long selectLeaderJoiNum(Long)
+ void deleteChallengeJoinsByChallengeId(Long)
+ ChallengeReviewVO selectChallengeReviewByMemberAndChallenge(Map<String,Object>)
+ void insertChallengePayment(ChallengePaymentVO)
+ ChallengePaymentVO selectChallengePayment(Long)
+ void updateChalPaymentStatus(Long)
+ void updateChallengeJoinStatus(Long)
+ void insertChallengeVerify(ChallengeVerifyVO)
+ Integer selectChallengeVerifyListRowCount(Map<String,Object>)
+ List<ChallengeVerifyVO> selectChallengeVerifyList(Map<String,Object>)
+ List<ChallengeVerifyVO> selectChallengeVerifyListPage(Map<String,Object>)
+ ChallengeVerifyVO selectChallengeVerify(Long)
+ void updateChallengeVerify(ChallengeVerifyVO)
+ void deleteChallengeVerify(Long)
+ int countWeeklyVerify(Map<String,Object>)
+ Integer countTodayVerify(Long)
+ void updateVerifyStatus(Map<String,Long>)
+ void insertVerifyReport(ChallengeVerifyRptVO)
+ void updateReportStatus(Long)
+ Integer selectReportedVerifyCount(Long)
+ Integer selectReportedMemberCount(Long)
+ Long selectChal_rev_num()
+ void insertChallengeReview(ChallengeReviewVO)
+ List<ChallengeReviewVO> selectChallengeReviewList(Long)
+ ChallengeReviewVO selectChallengeReview(Long)
+ void updateChallengeReview(ChallengeReviewVO)
+ void deleteChallengeReview(Long)
+ Long selectChat_id()
+ void insertChallengeChat(ChallengeChatVO)
+ void insertChatRead(Map<String,Object>)
+ List<ChallengeChatVO> selectChallengeChat(Map<String,Object>)
+ void deleteChatRead(Map<String,Object>)
+ void deleteChalChatRead(Long)
+ void deleteChallengeChat(Long)
+ ChallengeFavVO selectFav(ChallengeFavVO)
+ Integer selectFavCount(Long)
+ void insertFav(ChallengeFavVO)
+ void deleteFav(ChallengeFavVO)
+ List<ChallengeVO> getTodayExpiredChallenges(LocalDate)
+ void updateChallengeJoinStatusToCompleted(long)
+ void insertRefundPoints(Long,int,int)
+ List<ChallengeVO> selectChallengeList(Map<String,Object>)
+ int selectChallengeCount(Map<String,Object>)
+ List<ChallengeVO> getPopularChallenges()
+ List<ChallengeVO> getExerciseChallenges()
+ void deleteChalFavsByMember(long)
}

class kr.spring.member.service.EmailService {
- JavaMailSender javaMailSender
+ void sendMail(EmailMessageVO,String)
}


class kr.spring.config.EmailConfig {
- String host
- int port
- String username
- String password
- boolean auth
- int timeout
- boolean starttlsEnable
+ JavaMailSender javaMailSender()
- Properties getMailProperties()
}


interface kr.spring.goods.dao.PurchaseMapper {
~ void insertPurchase(PurchaseVO)
~ List<PurchaseVO> getPurchaseListByMember(long)
~ void updateRefundStatus(String,int)
~ List<PurchaseVO> getAllPurchases()
~ void updateDeliveryStatus(int,String)
~ Long insertPurchaseForCart(PurchaseVO)
~ Long getNextPurchaseNum()
~ List<CartVO> getPurchaseItems(long)
~ void insertPurchaseWithCartItems(PurchaseVO)
~ void insertPurchaseItems(CartVO)
~ Long getLatestPurchaseNum(long)
~ Long getSeq()
~ void updateDeliveryStatusByImpUid(String,String)
~ Long getLastInsertedPurchaseNum()
~ PurchaseVO getPurchaseByImpUid(String)
}

class kr.spring.member.vo.MemberTotalVO {
~ long mem_num
~ int mem_point
~ int total_count
~ long total_amount
}

interface kr.spring.member.dao.MemberMapper {
+ long selectMemNum()
+ void insertMember(MemberVO)
+ void insertMemberDetail(MemberVO)
+ MemberVO selectMember(Long)
+ MemberVO selectMemberDetail(Long)
+ MemberVO selectMemberByEmail(String)
+ Long selectMemNumByRCode(String)
+ void updateMemPoint(PointVO)
+ void updateMemPointByAdmin(PointVO)
+ int checkRCodeExists(String)
+ MemberVO selectMemberByNick(String)
+ MemberTotalVO selectMemberTotal(long)
+ void updateMemPhoto(MemberVO)
+ void updateMember(MemberVO)
+ void updateMemberDetail(MemberVO)
+ void updatePassword(MemberVO)
+ int selectMemberPaymentCount(Map<String,Object>)
+ List<PaymentVO> selectMemberPayment(Map<String,Object>)
+ void deleteMember(long)
+ List<MemberVO> selectMemberList(Map<String,Object>)
+ int selectMemberCount(Map<String,Object>)
+ void updateMemStatus(MemberVO)
+ void deleteMemberDetail(long)
+ void updateMemAuth(long,int)
}

class kr.spring.member.controller.MyPageAjaxController {
- MemberService memberService
+ Map<String,String> processMemPhoto(MemberVO,HttpSession,HttpServletRequest)
+ Map<String,String> deleteMemPhoto(HttpSession,HttpServletRequest)
+ Map<String,String> checkPassword(HttpSession,HttpServletRequest)
}


class kr.spring.cs.controller.CSController {
~ CSService csService
~ MemberService memberService
+ InquiryVO initInquiryCommand()
+ ReportVO initReportCommand()
+ String faqlist(String,Model)
+ String adminFAQ(String,Model)
+ Map<String,Object> insertFaqAjax(String,String,int,HttpSession)
+ Map<String,Object> modifyFaqAjax(String,String,long,HttpSession)
+ Map<String,Object> deleteFaqAjax(long,HttpSession)
+ String form(Model)
+ String inquiry(InquiryVO,BindingResult,HttpServletRequest,HttpSession,Model)
+ String inquiryList(int,int,HttpSession,Model)
+ String replyInquiryForm(long,Model)
+ String replyInquiry(InquiryVO,BindingResult,Model,HttpServletRequest)
+ String modifyInquiryFormAjax(long,Model)
+ String memberReport(int,String,HttpSession,Model)
+ String replyReportForm(long,Model)
+ String replyReport(ReportVO,BindingResult,Model)
+ String modifyReportFormAjax(long,Model)
+ String formReport(Long,Long,Long,Integer,long,Model,HttpSession)
+ String report(ReportVO,BindingResult,HttpServletRequest,HttpSession,Model)
}


interface kr.spring.subscription.dao.Sub_paymentMapper {
+ long getSub_payment_num()
+ void insertSub_payment(Sub_paymentVO)
+ Sub_paymentVO getSub_paymentByDate(long)
+ List<Sub_paymentVO> getSub_payment()
+ int getSub_paymentCountByMem_num(Map<String,Object>)
+ List<Sub_paymentVO> getSub_paymentByMem_num(Map<String,Object>)
+ List<Sub_paymentVO> getSub_paymentBySub_num(long)
+ void updateSubPayStatus(long,long)
}

interface kr.spring.subscription.service.Sub_paymentService {
+ void insertSub_payment(Sub_paymentVO)
+ long getSub_payment_num()
+ Sub_paymentVO getSub_paymentByDate(long)
+ List<Sub_paymentVO> getSub_payment()
+ int getSub_paymentCountByMem_num(Map<String,Object>)
+ List<Sub_paymentVO> getSub_paymentByMem_num(Map<String,Object>)
+ List<Sub_paymentVO> getSub_paymentBySub_num(long)
+ void updateSubPayStatus(long,long)
}

class kr.spring.goods.controller.PurchaseController {
- IamportClient impClient
- String apiKey
- String secretKey
- NotifyService notifyService
- PurchaseService purchaseService
+ void initImp()
+ String purchasePage(String,Model)
+ String getPurchasePage()
+ String goodsList()
+ String home()
+ IamportResponse<Payment> validateIamport(String,HttpSession)
+ Map<String,String> savePurchaseInfo(Map<String,Object>,HttpSession,HttpServletRequest)
+ String refundPage(String,Model)
+ Map<String,String> processRefund(Map<String,Object>,HttpSession,HttpServletRequest)
+ Map<String,String> purchaseFromCart(Map<String,Object>,HttpSession,HttpServletRequest)
+ String getPurchaseHistory(HttpSession,Model)
}


class kr.spring.dbox.vo.DboxReplyVO {
- int dbox_re_num
- long dbox_num
- long mem_num
- String dbox_re_content
- Date dbox_re_rdate
- Date dbox_re_mdate
- String dbox_re_ip
}

class kr.spring.member.vo.MemberVO {
- Long mem_num
- Integer auth_num
- String mem_social_id
- String mem_email
- String mem_nick
- Integer mem_status
- Integer mem_reg_type
- String mem_pw
- Integer pref_num
- String mem_photo
- String mem_name
- String mem_phone
- String mem_birth
- Date mem_date
- Date mem_mdate
- String mem_rcode
- String friend_rcode
- Integer recommend_status
- int mem_point
- MultipartFile upload
+ boolean isCheckedPassword(String)
}


class kr.spring.util.AuthCheckException {
}
interface kr.spring.goods.service.GoodsService {
~ void insertGoods(GoodsVO)
~ List<GoodsVO> selectList(Map<String,Object>,Integer)
~ Integer selectRowCount(Map<String,Object>)
~ void updateGoods(GoodsVO)
~ GoodsVO detailGoods(long)
~ void deleteGoods(long)
~ List<Map<String,Object>> getCategories()
+ void updatePayStatus(long,long)
~ GoodsVO todayGoods()
}

class kr.spring.dbox.controller.DboxAdiminController {
- DboxService dboxService
~ NotifyService notifyService
~ SubscriptionService subscriptionService
~ MemberService memberService
+ String dboxAdmin(int,int,List<Integer>,String,String,HttpSession,Model)
+ String statusAdmin(long,Model)
+ String statusChange(long,int,String)
+ void dboxUpdate()
}


class kr.spring.challenge.vo.ChallengeChatVO {
- long chat_id
- long chal_num
- long mem_num
- String chat_content
- MultipartFile upload
- String chat_filename
- String chat_date
- String mem_nick
- String mem_photo
- int chat_readCount
}

class kr.spring.member.vo.EmailMessageVO {
- String to
- String subject
- String message
}

class kr.spring.member.vo.UserInfo {
- String id
- String email
+ <<Create>> UserInfo(String,String)
}




kr.spring.point.service.PointService <|.. kr.spring.point.service.PointServiceImpl
kr.spring.member.service.MemberService <|.. kr.spring.member.service.MemberServiceImpl
org.springframework.boot.web.servlet.support.SpringBootServletInitializer <|-- kr.spring.ServletInitializer
kr.spring.goods.service.GoodsService <|.. kr.spring.goods.service.GoodsServiceImpl
kr.spring.subscription.service.SubscriptionService <|.. kr.spring.subscription.service.SubscriptionServiceImpl
kr.spring.challenge.service.ChallengeService <|.. kr.spring.challenge.service.ChallengeServiceImpl
kr.spring.cs.service.CSService <|.. kr.spring.cs.service.CSServiceImpl
org.springframework.web.socket.handler.TextWebSocketHandler <|-- kr.spring.websocket.SocketHandler
kr.spring.category.service.CategoryService <|.. kr.spring.category.service.CategoryServiceImpl
org.springframework.web.servlet.view.AbstractView <|-- kr.spring.view.DownloadView
kr.spring.cart.service.CartService <|.. kr.spring.cart.service.CartServiceImpl
kr.spring.member.service.MemberDeleteService <|.. kr.spring.member.service.MemberDeleteServiceImpl
kr.spring.refund.service.RefundService <|.. kr.spring.refund.service.RefundServiceImpl
kr.spring.config.validation.ValidationGroups +.. kr.spring.config.validation.ValidationGroups$NotNullGroup
kr.spring.config.validation.ValidationGroups +.. kr.spring.config.validation.ValidationGroups$PatternCheckGroup
kr.spring.config.validation.ValidationGroups +.. kr.spring.config.validation.ValidationGroups$SizeCheckGroup
kr.spring.config.validation.ValidationGroups +.. kr.spring.config.validation.ValidationGroups$TypeCheckGroup
kr.spring.goods.service.PurchaseService <|.. kr.spring.goods.service.PurchaseServiceImpl
kr.spring.dbox.service.DboxService <|.. kr.spring.dbox.service.DboxServiceImpl
org.springframework.web.servlet.HandlerInterceptor <|.. kr.spring.interceptor.LoginCheckInterceptor
kr.spring.data.service.DataService <|.. kr.spring.data.service.DataServiceImpl
org.springframework.web.servlet.HandlerInterceptor <|.. kr.spring.interceptor.MemStatusCheckInterceptor
org.springframework.web.servlet.HandlerInterceptor <|.. kr.spring.interceptor.WriterCheckInterceptor
kr.spring.subscription.service.Sub_paymentService <|.. kr.spring.subscription.service.Sub_paymentServiceImpl
org.springframework.web.servlet.config.annotation.WebMvcConfigurer <|.. kr.spring.config.AppConfig
org.springframework.web.socket.config.annotation.WebSocketConfigurer <|.. kr.spring.config.AppConfig
kr.spring.payuid.service.PayuidService <|.. kr.spring.payuid.service.PayuidServiceImpl
kr.spring.member.service.MemberOAuthService <|.. kr.spring.member.service.MemberOAuthServiceImpl
org.springframework.web.servlet.view.AbstractView <|-- kr.spring.view.ImageView
kr.spring.category.controller.CategoryController +.. kr.spring.category.controller.CategoryController$DonationCategoryController
kr.spring.notify.service.NotifyService <|.. kr.spring.notify.service.NotifyServiceImpl
kr.spring.util.Exception <|-- kr.spring.util.AuthCheckException
@enduml