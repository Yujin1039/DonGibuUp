@startuml
class kr.spring.goods.controller.adminController {
- PurchaseService purchaseService
- NotifyService notifyService
+ String getPurchaseList(Model)
+ String updateDeliveryStatus(String,String)
}


class kr.spring.goods.util.fileUtil {
+ {static} String createFile(HttpServletRequest,MultipartFile)
}

class kr.spring.goods.service.GoodsServiceImpl {
~ GoodsMapper goodsMapper
+ void insertGoods(GoodsVO)
+ List<GoodsVO> selectList(Map<String,Object>,Integer)
+ Integer selectRowCount(Map<String,Object>)
+ void updateGoods(GoodsVO)
+ GoodsVO detailGoods(long)
+ void deleteGoods(long)
+ List<Map<String,Object>> getCategories()
+ void updatePayStatus(long,long)
+ GoodsVO todayGoods()
}


interface kr.spring.goods.dao.PurchaseMapper {
~ void insertPurchase(PurchaseVO)
~ List<PurchaseVO> getPurchaseListByMember(long)
~ void updateRefundStatus(String,int)
~ List<PurchaseVO> getAllPurchases()
~ void updateDeliveryStatus(int,String)
~ Long insertPurchaseForCart(PurchaseVO)
~ Long getNextPurchaseNum()
~ List<CartVO> getPurchaseItems(long)
~ void insertPurchaseWithCartItems(PurchaseVO)
~ void insertPurchaseItems(CartVO)
~ Long getLatestPurchaseNum(long)
~ Long getSeq()
~ void updateDeliveryStatusByImpUid(String,String)
~ Long getLastInsertedPurchaseNum()
~ PurchaseVO getPurchaseByImpUid(String)
}

interface kr.spring.goods.service.PurchaseService {
~ void insertPurchase(PurchaseVO)
~ List<CartVO> getPurchaseItems(long)
~ List<PurchaseVO> getPurchaseListByMember(long)
~ List<PurchaseVO> getAllPurchases()
~ void updateDeliveryStatus(int,String)
~ void updateRefundStatus(String,int)
~ void insertPurchaseWithCartItems(PurchaseVO)
~ void insertPurchaseItems(CartVO)
~ Long getSeq()
~ void updateDeliveryStatusByImpUid(String,String)
~ void updateStock(Map<String,Object>)
~ void updateStock(Long,Long,Integer)
~ Long getLastInsertedPurchaseNum()
~ PurchaseVO getPurchaseByImpUid(String)
}

class kr.spring.goods.controller.GoodsController {
- GoodsService goodsService
- CategoryService categoryService
+ GoodsVO initCommand()
+ String getlist(int,int,int,String,String,Model,HttpSession)
+ ModelAndView process(long)
+ String form()
+ String submit(GoodsVO,BindingResult,HttpServletRequest,HttpSession,Model)
+ String updateForm(long,HttpSession,Model)
+ String updateSubmit(GoodsVO,BindingResult,HttpSession,Model)
+ String deleteSubmit1(long,HttpSession,Model)
+ String deleteSubmit(long,HttpSession,Model)
}


interface kr.spring.goods.dao.GoodsMapper {
+ List<GoodsVO> selectList(Map<String,Object>)
+ Integer selectRowCount(Map<String,Object>)
+ void insertGoods(GoodsVO)
+ GoodsVO detailGoods(long)
+ void updateGoods(GoodsVO)
+ void deleteGoods(long)
+ void deleteCartItems(long)
~ void updateStock(Map<String,Object>)
+ GoodsVO selectTodayGoods()
~ List<Map<String,Object>> getCategories()
+ void updatePayStatus(long,long)
}

class kr.spring.goods.vo.PurchaseVO {
- Long purchase_num
- long mem_num
- long item_num
- String item_name
- String imp_uid
- String Merchant_uid
- int amount
- int pay_price
- String buyer_name
- String buyer_email
- String item_photo
- Date payDate
- int payStatus
- String deliveryStatus
- int pamount
- int totalAmount
- String delivery_address
- int point_used
- Long cartItemNum
- String cartItemPrice
- int cartQuantity
- String cartItemName
- String cartItemPhoto
- List<CartVO> cart_items
+ List<CartVO> getCart_items()
+ void setCart_items(List<CartVO>)
+ long getMem_num()
+ void setMem_num(long)
}


class kr.spring.goods.controller.PurchaseController {
- IamportClient impClient
- String apiKey
- String secretKey
- NotifyService notifyService
- PurchaseService purchaseService
+ void initImp()
+ String purchasePage(String,Model)
+ String getPurchasePage()
+ String goodsList()
+ String home()
+ IamportResponse<Payment> validateIamport(String,HttpSession)
+ Map<String,String> savePurchaseInfo(Map<String,Object>,HttpSession,HttpServletRequest)
+ String refundPage(String,Model)
+ Map<String,String> processRefund(Map<String,Object>,HttpSession,HttpServletRequest)
+ Map<String,String> purchaseFromCart(Map<String,Object>,HttpSession,HttpServletRequest)
+ String getPurchaseHistory(HttpSession,Model)
}


interface kr.spring.goods.service.GoodsService {
~ void insertGoods(GoodsVO)
~ List<GoodsVO> selectList(Map<String,Object>,Integer)
~ Integer selectRowCount(Map<String,Object>)
~ void updateGoods(GoodsVO)
~ GoodsVO detailGoods(long)
~ void deleteGoods(long)
~ List<Map<String,Object>> getCategories()
+ void updatePayStatus(long,long)
~ GoodsVO todayGoods()
}

class kr.spring.goods.service.PurchaseServiceImpl {
- PurchaseMapper purchaseMapper
- GoodsMapper goodsMapper
~ NotifyService notifyService
+ void insertPurchase(PurchaseVO)
+ void insertPurchaseWithCartItems(PurchaseVO)
+ List<CartVO> getPurchaseItems(long)
+ List<PurchaseVO> getPurchaseListByMember(long)
+ Long getLastInsertedPurchaseNum()
+ List<PurchaseVO> getAllPurchases()
+ PurchaseVO getPurchaseByImpUid(String)
+ void updateDeliveryStatus(int,String)
+ void updateDeliveryStatusByImpUid(String,String)
+ void updateRefundStatus(String,int)
+ Long getSeq()
+ void insertPurchaseItems(CartVO)
+ void updateStock(Long,Long,Integer)
+ void updateStock(Map<String,Object>)
}


class kr.spring.goods.vo.GoodsVO {
- Long item_status
- long item_num
- Long dcate_num
- String item_name
- String item_photo
- String item_detail
- Long item_price
- Long item_stock
- Date item_reg_date
- Date item_mdate
- MultipartFile upload
}



kr.spring.goods.service.GoodsService <|.. kr.spring.goods.service.GoodsServiceImpl
kr.spring.goods.service.PurchaseService <|.. kr.spring.goods.service.PurchaseServiceImpl
@enduml